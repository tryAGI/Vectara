openapi: 3.0.4
info:
  title: Vectara REST API v2
  description: "Vectara provides an end-to-end platform for creating GenAI products using a simple to use API.\nYou can [sign up for an account](https://console.vectara.com/signup) and then view several [API Recipes](https://docs.vectara.com/docs/api-recipes) with example queries and parameter values.\nThe Vectara API Playground lets you experiment with REST endpoints from your browser. Select an endpoint to view its definition, including the required or optional headers, body, responses, and sample commands. On the right side of each endpoint page, like [Get Corpus](/docs/rest-api/get-corpus), you manually enter your API Key or OAuth Bearer Token, `customer_id`, and then any required body parameters like the `corpusID` before sending the API request.\n:::note\nVectara supports two primary methods of authentication: API keys and OAuth 2.0, which are applicable to all endpoints. Query API Keys are used for read-only querying operations, while Index API Keys provide read and write access. The OAuth 2.0 operations authenticate with a Bearer Token via the OAuth 2.0 client credentials grant. Review the [**OAuth 2.0 section**](https://docs.vectara.com/docs/learn/authentication/oauth-2) about how to generate the token."
  termsOfService: https://vectara.com/legal/terms-of-service/
  contact:
    email: feedback@vectara.com
  version: 2.0.0
  x-logo:
    url: https://docs.vectara.com/img/vectara_wordmark.png
    altText: Vectara
  x-dark-logo:
    url: https://docs.vectara.com/img/vectara_wordmark_light.png
    altText: Vectara
servers:
  - url: https://api.vectara.io
paths:
  /v2/corpora:
    post:
      tags:
        - Corpora
      summary: Create a corpus
      description: 'Create a corpus, which is a container to store documents and associated metadata. Here, you define the unique `corpus_key` that identifies the corpus. The `corpus_key` can be custom-defined following your preferred naming convention, allowing you to easily manage the corpus''s data and reference it in queries. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).'
      operationId: createCorpus
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCorpusRequest'
      responses:
        '201':
          description: The corpus has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Corpus'
        '400':
          description: Invalid request body in the create corpus request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating a corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The corpus already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: create
    get:
      tags:
        - Corpora
      summary: List corpora
      description: List corpora in the account. The returned corpus objects contain less detail compared to those retrieved the direct corpus retrieval operation.
      operationId: listCorpora
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: limit
          in: query
          description: The maximum number of corpora to return at one time.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 10
        - name: filter
          in: query
          description: A regular expression to filter the corpora by their name or summary.
          schema:
            type: string
        - name: corpus_id
          in: query
          description: Filter corpora to only include corpora with these IDs.
          schema:
            type: array
            items:
              pattern: 'crp_[0-9]+$'
              type: string
        - name: page_key
          in: query
          description: Used to retrieve the next page of corpora after the limit has been reached.
          schema:
            type: string
      responses:
        '200':
          description: List of corpora.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCorporaResponse'
        '403':
          description: Permissions do not allow listing corpora.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.corpora
  '/v2/corpora/{corpus_key}':
    get:
      tags:
        - Corpora
      summary: Retrieve metadata about a corpus
      description: 'Get metadata about a corpus. This operation does not search the corpus contents. Specify the `corpus_key` to identify the corpus whose metadata you want to retrieve. The `corpus_key` is created when the corpus is set up, either through the Vectara Console UI or the Create Corpus API. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).'
      operationId: getCorpus
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the corpus to retrieve.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
      responses:
        '200':
          description: A corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Corpus'
        '403':
          description: Permissions do not allow retrieving the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: get
    delete:
      tags:
        - Corpora
      summary: Delete a corpus and all its data
      description: 'Permanently delete a corpus and all its associated data. The `corpus_key` uniquely identifies the corpus. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).'
      operationId: deleteCorpus
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the corpus to delete.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
      responses:
        '204':
          description: Successfully deleted a corpus.
        '403':
          description: Permissions do not allow deleting the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: delete
    patch:
      tags:
        - Corpora
      summary: Update a corpus
      description: 'Enable, disable, or update the name and description of a corpus. This lets you manage data availability without deleting the corpus, which is useful for maintenance and security purposes. The `corpus_key` uniquely identifies the corpus. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition). Consider updating the name and description of a corpus dynamically to help keep your data aligned with changing business needs.'
      operationId: updateCorpus
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the corpus to update.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCorpusRequest'
      responses:
        '200':
          description: Successfully modified the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Corpus'
        '403':
          description: Permissions do not allow updating the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: update
  '/v2/corpora/{corpus_key}/reset':
    post:
      tags:
        - Corpora
      summary: Remove all documents and data in a corpus
      description: 'Resets a corpus, which removes all documents and data from the specified corpus, while keeping the corpus itself. The `corpus_key` uniquely identifies the corpus. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).'
      operationId: resetCorpus
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the corpus to reset.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
      responses:
        '204':
          description: Successfully reset a corpus.
        '403':
          description: Permissions do not allow resetting the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: reset
  '/v2/corpora/{corpus_key}/replace_filter_attributes':
    post:
      tags:
        - Corpora
      summary: Replace the filter attributes of a corpus
      description: "Replace the filter attributes of a corpus. This does not happen immediately, as this operation creates a job that completes asynchronously. These new filter attributes will not work until the job completes.\nYou can monitor the status of the filter change using the returned job ID. The `corpus_key` uniquely identifies the corpus. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition)."
      operationId: replaceFilterAttributes
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the corpus having its filters replaced.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceFilterAttributesRequest'
      responses:
        '200':
          description: Successfully created a job that will replace the filter attributes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceFilterAttributesResponse'
        '403':
          description: Permissions do not allow replacing filter attributes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: replaceFilterAttributes
  '/v2/corpora/{corpus_key}/compute_size':
    post:
      tags:
        - Corpora
      summary: Compute the current size of a corpus
      description: 'Compute the current size of a corpus, including number of documents, parts, and characters. The `corpus_key` uniquely identifies the corpus. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition).'
      operationId: computeCorpusSize
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the corpus to compute size for.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
      responses:
        '200':
          description: Successfully computed the corpus size.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputeCorpusSizeResponse'
        '403':
          description: Permissions do not allow computing size for this corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: compute_size
  '/v2/corpora/{corpus_key}/query':
    get:
      tags:
        - Queries
      summary: Simple Single Corpus Query
      description: "Search a single corpus with a straightforward query request, specifying the corpus key and query parameters. * Specify the unique `corpus_key` identifying the corpus to query. The `corpus_key` is [created in the Vectara Console UI](https://docs.vectara.com/docs/console-ui/creating-a-corpus) or the [Create Corpus API definition](https://docs.vectara.com/docs/api-reference/admin-apis/create-corpus). When creating a new corpus, you have the option to assign a custom `corpus_key` following your preferred naming convention. This key serves as a unique identifier for the corpus, allowing it to be referenced in search requests. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition). * Enter the search `query` string for the corpus, which is the question you want to ask. * Set the maximum number of results (`limit`) to return. **Default**: 10, **minimum**: 1 * Define the `offset` position from which to start in the result set.\nFor more detailed information, see this [Query API guide](https://docs.vectara.com/docs/api-reference/search-apis/search)."
      operationId: searchCorpus
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the corpus to query.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
        - name: query
          in: query
          description: 'The search query string for the corpus, which is the question the user is asking.'
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of top retrieval results to rerank and return.
          schema:
            minimum: 1
            type: integer
            default: 10
        - name: offset
          in: query
          description: The position from which to start in the result set.
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: save_history
          in: query
          description: Indicates whether to save the query in the query history.
          schema:
            type: boolean
        - name: intelligent_query_rewriting
          in: query
          description: '[Tech Preview] Indicates whether to enable intelligent query rewriting. When enabled, the platform will attempt to extract metadata filter and rewrite the query to improve search results. Read [here](https://docs.vectara.com/docs/search-and-retrieval/intelligent-query-rewriting) for more details.'
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: A response to a query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryFullResponse'
        '400':
          description: Query request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow querying the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: search
    post:
      tags:
        - Queries
      summary: Advanced Single Corpus Query
      description: "Perform an advanced query on a specific corpus to find relevant results, highlight relevant snippets, and use Retrieval Augmented Generation:\n* Specify the unique `corpus_key` identifying the corpus to query. The `corpus_key` is [created in the Vectara Console UI](https://docs.vectara.com/docs/console-ui/creating-a-corpus) or the [Create Corpus API definition](https://docs.vectara.com/docs/api-reference/admin-apis/create-corpus). When creating a new corpus, you have the option to assign a custom `corpus_key` following your preferred naming convention. This key serves as a unique identifier for the corpus, allowing it to be referenced in search requests. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition). * Customize your search by specifying the query text (`query`), pagination details (`offset` and `limit`), and metadata filters (`metadata_filter`) to tailor your search results. [Learn more](https://docs.vectara.com/docs/api-reference/search-apis/search#query-definition) * Leverage advanced search capabilities like reranking (`reranker`) and Retrieval Augmented Generation (RAG) (`generation`) for enhanced query performance. Generation is opt in by setting the `generation` property. By excluding the property or by setting it to null, the response will not include generation. [Learn more](https://docs.vectara.com/docs/learn/grounded-generation/configure-query-summarization). * Use hybrid search to achieve optimal results by setting different values for `lexical_interpolation` (e.g., `0.025`). [Learn more](https://docs.vectara.com/docs/learn/hybrid-search) * Specify Vectara's RAG-focused LLM (Mockingbird) for the `generation_preset_name`. [Learn more](https://docs.vectara.com/docs/learn/mockingbird-llm) * Use advanced summarization options that utilize detailed summarization parameters such as `max_response_characters`, `temperature`, and `frequency_penalty` for generating precise and relevant summaries. [Learn more](https://docs.vectara.com/docs/api-reference/search-apis/search#advanced-summarization-options)\nFor more detailed information, see [Query API guide](https://docs.vectara.com/docs/api-reference/search-apis/search)."
      operationId: queryCorpus
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the corpus to query.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryCorpusRequest'
      responses:
        '200':
          description: A response to a query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryFullResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/QueryStreamedResponse'
        '400':
          description: Query request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow querying the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-stream-based-on-body: streamResponse()
      x-fern-streaming:
        format: sse
        stream-condition: $request.stream_response
        response:
          $ref: '#/components/schemas/QueryFullResponse'
        response-stream:
          $ref: '#/components/schemas/QueryStreamedResponse'
      x-fern-sdk-group-name: corpora
      x-fern-sdk-method-name: query
  /v2/query:
    post:
      tags:
        - Queries
      summary: Multiple Corpora Query
      description: "Perform a multipurpose query across to retrieve relevant information from one or more corpora and generate a response using Retrieval Augmented Generation (RAG).\n* Specify the unique `corpus_key` identifying the corpus to query. The `corpus_key` is [created in the Vectara Console UI](https://docs.vectara.com/docs/console-ui/creating-a-corpus) or the [Create Corpus API definition](https://docs.vectara.com/docs/api-reference/admin-apis/create-corpus). When creating a new corpus, you have the option to assign a custom `corpus_key` following your preferred naming convention. This key serves as a unique identifier for the corpus, allowing it to be referenced in search requests. For more information, see [Corpus Key Definition](https://docs.vectara.com/docs/api-reference/search-apis/search#corpus-key-definition). * Customize your search by specifying the query text (`query`), pagination details (`offset` and `limit`), and metadata filters (`metadata_filter`) to tailor your search results. [Learn more](https://docs.vectara.com/docs/api-reference/search-apis/search#query-definition) * Leverage advanced search capabilities like reranking (`reranker`) and opt-in Retrieval Augmented Generation (RAG) (`generation`) for enhanced query performance. Generation is opt in by setting the `generation` property. By excluding the property or by setting it to null, the response will not include generation. [Learn more](https://docs.vectara.com/docs/learn/grounded-generation/configure-query-summarization) * Specify Vectara's RAG-focused LLM (Mockingbird) for the `generation_preset_name`. [Learn more](https://docs.vectara.com/docs/learn/mockingbird-llm) * Use advanced summarization options that utilize detailed summarization parameters such as `max_response_characters`, `temperature`, and `frequency_penalty` for generating precise and relevant summaries. [Learn more](https://docs.vectara.com/docs/api-reference/search-apis/search#advanced-summarization-customization-options) * Customize citation formats in summaries using the `citations` object to include numeric, HTML, or Markdown links. [Learn more](https://docs.vectara.com/docs/api-reference/search-apis/search#citation-format-in-summary)\nFor more detailed information, see this [Query API guide](https://docs.vectara.com/docs/api-reference/search-apis/search)."
      operationId: query
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: A response to a query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryFullResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/QueryStreamedResponse'
        '400':
          description: Query request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow querying one or more corpora in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: One or more of the corpora were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-stream-based-on-body: streamResponse()
      x-fern-streaming:
        stream-condition: $request.stream_response
        format: sse
        response:
          $ref: '#/components/schemas/QueryFullResponse'
        response-stream:
          $ref: '#/components/schemas/QueryStreamedResponse'
      x-fern-sdk-method-name: query
      x-fern-examples:
        - name: Batch
          request:
            stream_response: false
            query: What is a hallucination?
            search:
              corpora:
                - corpus_key: corpus_key
                  metadata_filter: ''
                  lexical_interpolation: 0.005
              context_configuration:
                sentences_before: 2
                sentences_after: 2
              reranker:
                type: customer_reranker
                reranker_id: rnk_272725719
            generation:
              response_language: eng
              enable_factual_consistency_score: true
          response:
            body: { }
        - name: Stream
          request:
            stream_response: true
            query: What is a hallucination?
            search:
              corpora:
                - corpus_key: corpus_key
                  metadata_filter: ''
                  lexical_interpolation: 0.005
              context_configuration:
                sentences_before: 2
                sentences_after: 2
              reranker:
                type: customer_reranker
                reranker_id: rnk_272725719
            generation:
              response_language: eng
              enable_factual_consistency_score: true
          response:
            stream: [ ]
      x-fern-sdk-group-name: queries
  '/v2/corpora/{corpus_key}/upload_file':
    post:
      tags:
        - Upload
      summary: Upload a file to the corpus
      description: "Upload files such as PDFs and Word Documents for automatic text extraction and metadata parsing.\nThe request expects a `multipart/form-data` format containing the following parts:\n* `metadata` - Optionally specifies a JSON object representing any additional metadata to be associated with the extracted document. For example, `'metadata={\"key\": \"value\"};type=application/json'` * `chunking_strategy` - If provided, specifies the chunking strategy for the platform to use. If you do not set this option, the platform uses the default strategy, which creates one chunk per sentence. You can explicitly set sentence chunking with `'chunking_strategy={\"type\":\"sentence_chunking_strategy\"};type=application/json'` or use max chars chunking with `'chunking_strategy={\"type\":\"max_chars_chunking_strategy\",\"max_chars_per_chunk\":200};type=application/json'` * `table_extraction_config` - You can optionally specify whether to extract table data from the uploaded file. If you do not set this option, the platform does not extract tables from PDF files. Example config, `'table_extraction_config={\"extract_tables\":true};type=application/json'` * `file` - Specifies the file that you want to upload. * `filename` - Specified as part of the file field with the file name that you want to associate with the uploaded file. For a curl example, use the following syntax: `'file=@/path/to/file/file.pdf;filename=desired_filename.pdf'`\nFor more detailed information, see this [File Upload API guide.](https://docs.vectara.com/docs/api-reference/indexing-apis/file-upload/file-upload)"
      operationId: uploadFile
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the corpus of which to upload the file.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
      requestBody:
        description: Upload a file for the Vectara platform to attempt to parse and turn into a document within the corpus. The first part of the multipart request can contain any document metadata to attach to the parsed document. Only one document may be uploaded at a time.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadFileRequest'
            encoding:
              metadata:
                contentType: application/json
              chunking_strategy:
                contentType: application/json
              table_extraction_config:
                contentType: application/json
              file:
                contentType: 'application/octet-stream, application/pdf, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.oasis.opendocument.text, application/epub+zip, application/rtf, text/html, text/plain, application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation, text/markdown'
              filename:
                contentType: text/plain
      responses:
        '201':
          description: The extracted document has been parsed and added to the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Upload file request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow uploading a file to the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '415':
          description: The media type of the uploaded file is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-examples:
        - code-samples:
            - language: python
              code: "from vectara import Vectara\n\nclient = Vectara(\n    api_key=\"YOUR_API_KEY\",\n    # or\n    client_id=\"YOUR_CLIENT_ID\",\n    client_secret=\"YOUR_CLIENT_SECRET\",\n)\nclient.upload.file(\n    corpus_key=corpus_key,\n    file=content,\n    filename=slugify(url),\n)\n"
      x-fern-sdk-group-name: upload
      x-fern-sdk-method-name: file
  '/v2/corpora/{corpus_key}/documents':
    post:
      tags:
        - Index
      summary: Add a document to a corpus
      description: "Add a document to a corpus. This endpoint supports two document formats, structured and core.\n* **Structured** documents have a more conventional structure that provide document sections and parts in a format created by Vectara's proprietary strategy automatically. You provide a logical document structure, and Vectara handles the partitioning. * **Core** documents differ in that they follow an advanced, granular structure that explicitly defines each document part in an array. Each part becomes a distinct, searchable item in query results. You have precise control over the document structure and content.\nFor more details, see [Indexing](https://docs.vectara.com/docs/learn/select-ideal-indexing-api)."
      operationId: createCorpusDocument
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the queried corpus.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
      responses:
        '201':
          description: Document added to the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Document creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow adding a document to the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '409':
          description: The document already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: documents
      x-fern-sdk-method-name: create
      x-fern-examples:
        - path-parameters:
            corpus_key: my-corpus-key
          request:
            id: my-doc-id
            type: structured
            sections:
              - id: 1
                title: A nice title.
                text: I'm a nice document section.
                metadata:
                  section: '2025-01-01'
              - id: 2
                title: Another nice title.
                text: I'm another document section on something else.
                metadata:
                  section: '2025-01-02'
            metadata:
              url: https://example.com
          response:
            body: { }
    get:
      tags:
        - Documents
      summary: List the documents in the corpus
      description: Retrieve a list of documents stored in a specific corpus. This endpoint provides an overview of document metadata without returning the full content of each document.
      operationId: listCorpusDocuments
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the queried corpus.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
        - name: limit
          in: query
          description: The maximum number of documents to return at one time.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 10
        - name: metadata_filter
          in: query
          description: 'Filter documents by metadata. Uses the same expression as a query metadata filter, but only allows filtering on document metadata.'
          schema:
            type: string
        - name: page_key
          in: query
          description: Used to retrieve the next page of documents after the limit has been reached.
          schema:
            type: string
      responses:
        '200':
          description: List of documents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDocumentsResponse'
        '403':
          description: Permissions do not allow listing documents in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: documents
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.documents
  '/v2/corpora/{corpus_key}/documents/{document_id}':
    delete:
      tags:
        - Documents
      summary: Delete a document
      description: 'Permanently delete a document identified by its unique `document_id` from a specific corpus. This operation cannot be undone, so use it with caution.'
      operationId: deleteCorpusDocument
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the corpus with the document to delete.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
        - name: document_id
          in: path
          description: The document ID of the document to delete. This `document_id` must be percent encoded.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted the document.
        '403':
          description: Permissions do not allow deleting a document in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: documents
      x-fern-sdk-method-name: delete
    get:
      tags:
        - Documents
      summary: Retrieve a document
      description: 'Retrieve the content and metadata of a specific document, identified by its unique `document_id` from a specific corpus.'
      operationId: getCorpusDocument
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the corpus containing the document to retrieve.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
        - name: document_id
          in: path
          description: The document ID of the document to retrieve. This `document_id` must be percent encoded.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '403':
          description: Permissions do not allow retrieving a document from the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: documents
      x-fern-sdk-method-name: get
    patch:
      tags:
        - Index
      summary: 'Update document, merging the metadata.'
      description: 'Updates document identified by its unique `document_id` from a specific corpus. The request body metadata is merged with the existing metadata, adding or modifying only the specified fields.'
      operationId: updateCorpusDocument
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the corpus with the document to update.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
        - name: document_id
          in: path
          description: The document ID of the document to update. This `document_id` must be percent encoded.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDocumentRequest'
      responses:
        '200':
          description: Successfully updated the document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '403':
          description: Permissions do not allow updating a document in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '429':
          description: Too many concurrent requests. Please retry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: documents
      x-fern-sdk-method-name: update
  '/v2/corpora/{corpus_key}/documents/{document_id}/metadata':
    put:
      tags:
        - Index
      summary: Replace the document metadata.
      description: Replaces metadata of a document identified by its unique `document_id` from a specific corpus.
      operationId: replaceCorpusDocumentMetadata
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the corpus with the document to update.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
        - name: document_id
          in: path
          description: The document ID of the document to update. This `document_id` must be percent encoded.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDocumentRequest'
      responses:
        '200':
          description: Successfully updated the document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '403':
          description: Permissions do not allow updating a document in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '429':
          description: Too many concurrent requests. Please retry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: documents
      x-fern-sdk-method-name: update_metadata
  '/v2/corpora/{corpus_key}/documents/{document_id}/summarize':
    post:
      tags:
        - Documents
      summary: Summarize a document
      description: Summarize a document identified by its unique `document_id` from a specific corpus.
      operationId: summarizeCorpusDocument
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: path
          description: The unique key identifying the corpus containing the document to retrieve.
          required: true
          schema:
            $ref: '#/components/schemas/CorpusKey'
        - name: document_id
          in: path
          description: The document ID of the document to retrieve. This `document_id` must be percent encoded.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SummarizeDocumentRequest'
      responses:
        '200':
          description: Document summarization response on success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummarizeDocumentResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/SummarizeDocumentStreamedResponse'
        '403':
          description: Permissions do not allow summarizing a document in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-stream-based-on-body: streamResponse()
      x-fern-sdk-group-name: documents
      x-fern-sdk-method-name: summarize
  /v2/chats:
    post:
      tags:
        - Chats
      summary: Start a chat
      description: Create a chat while specifying the default retrieval parameters used by the prompt.
      operationId: createChat
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: A response to a chat request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFullResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ChatStreamedResponse'
        '400':
          description: Chat creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating a chat in the corpus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-stream-based-on-body: streamResponse()
      x-fern-streaming:
        format: sse
        stream-condition: $request.stream_response
        response:
          $ref: '#/components/schemas/ChatFullResponse'
        response-stream:
          $ref: '#/components/schemas/ChatStreamedResponse'
      x-fern-sdk-method-name: create
      x-fern-examples:
        - name: Batch
          request:
            stream_response: false
            query: What is a hallucination?
            search:
              corpora:
                - corpus_key: corpus_key
                  metadata_filter: ''
                  lexical_interpolation: 0.005
              context_configuration:
                sentences_before: 2
                sentences_after: 2
              reranker:
                type: customer_reranker
                reranker_id: rnk_272725719
            generation:
              response_language: eng
              enable_factual_consistency_score: true
              citations:
                style: none
            chat:
              store: true
          response:
            body: { }
        - name: Stream
          request:
            stream_response: true
            query: What is a hallucination?
            search:
              corpora:
                - corpus_key: corpus_key
                  metadata_filter: ''
                  lexical_interpolation: 0.005
              context_configuration:
                sentences_before: 2
                sentences_after: 2
              reranker:
                type: customer_reranker
                reranker_id: rnk_272725719
            generation:
              response_language: eng
              citations:
                style: none
              enable_factual_consistency_score: true
            chat:
              store: true
          response:
            stream: [ ]
      x-fern-sdk-group-name: chats
    get:
      tags:
        - Chats
      summary: List chats
      description: Retrieve a list of previous chats in the Vectara account.
      operationId: listChats
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: limit
          in: query
          description: The maximum number of results to return in the list.
          schema:
            maximum: 10000
            minimum: 1
            type: integer
            format: int32
            default: 1000
        - name: page_key
          in: query
          description: Used to retrieve the next page of chats after the limit has been reached.
          schema:
            type: string
      responses:
        '200':
          description: List of chats.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListChatsResponse'
        '403':
          description: Permissions do not allow listing chats.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.chats
  /v2/llms:
    post:
      tags:
        - Large Language Models
      summary: Create an LLM
      description: Create a new LLM for use with query and chat endpoints
      operationId: createLLM
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLLMRequest'
      responses:
        '201':
          description: The LLM has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLM'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating an LLM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: llms
      x-fern-sdk-method-name: create
    get:
      tags:
        - Large Language Models
      summary: List LLMs
      description: 'List LLMs that can be used with query and chat endpoints. The LLM is not directly specified in a query, but instead a `generation_preset_name` is used. The `generation_preset_name` property in generation parameters can be found as the `name` property on the Generations Presets retrieved from `/v2/generation_presets`.'
      operationId: listLLMs
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: filter
          in: query
          description: A regular expression to match names and descriptions of the LLMs.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to return in the list.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 10
        - name: page_key
          in: query
          description: Used to retrieve the next page of LLMs after the limit has been reached. This parameter is not needed for the first page of results.
          schema:
            type: string
      responses:
        '200':
          description: List of LLMs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLLMsResponse'
        '403':
          description: Permissions do not allow listing summarizers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: llms
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.llms
  '/v2/llms/{llm_id}':
    get:
      tags:
        - Large Language Models
      summary: Get an LLM
      description: Get details about a specific LLM.
      operationId: getLLM
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: llm_id
          in: path
          description: The name of the LLM to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The LLM details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLM'
        '403':
          description: Permissions do not allow retrieving this LLM.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: LLM not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: llms
      x-fern-sdk-method-name: get
    delete:
      tags:
        - Large Language Models
      summary: Delete an LLM
      description: Delete a custom LLM connection. Built-in LLMs cannot be deleted.
      operationId: deleteLLM
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: llm_id
          in: path
          description: The name of the LLM to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The LLM was successfully deleted.
        '403':
          description: Permissions do not allow deleting this LLM.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: LLM not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: llms
      x-fern-sdk-method-name: delete
  /v2/generation_presets:
    get:
      tags:
        - Generation Presets
      summary: List generation presets
      description: 'List generation presets used for query or chat requests. Generation presets are the build of properties used to configure generation for a request. This includes the template that renders the prompt, and various generation settings like `temperature`.'
      operationId: listGenerationPresets
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: llm_name
          in: query
          description: Filter presets by the LLM name.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to return in the list.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 10
        - name: page_key
          in: query
          description: Used to retrieve the next page of generation presets after the limit has been reached. This parameter is not needed for the first page of results.
          schema:
            type: string
      responses:
        '200':
          description: List of Generation Presets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGenerationPresetsResponse'
        '403':
          description: Permissions do not allow listing generation presets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: generation_presets
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.generation_presets
  '/v2/chats/{chat_id}':
    get:
      tags:
        - Chats
      summary: Get a chat
      description: 'Get a chat summary to view what started the chat, but not subsequent turns.'
      operationId: getChat
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: chat_id
          in: path
          description: The ID of the chat.
          required: true
          schema:
            pattern: cht_.+$
            type: string
      responses:
        '200':
          description: A chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '403':
          description: Permissions do not allow retrieving the chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or chat not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: get
    delete:
      tags:
        - Chats
      summary: Delete a chat
      description: Delete a chat and any turns it contains permanently.
      operationId: deleteChat
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: chat_id
          in: path
          description: The ID of the chat.
          required: true
          schema:
            pattern: cht_.+$
            type: string
      responses:
        '204':
          description: Successfully deleted the chat.
        '403':
          description: Permissions do not allow deleting the chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or chat not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: delete
  '/v2/chats/{chat_id}/turns':
    post:
      tags:
        - Chats
      summary: Create a new turn in the chat
      description: 'Create a new turn in the chat. Each conversation has a series of `turn` objects, which are the sequence of message and response pairs that make up the dialog.'
      operationId: createChatTurn
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: chat_id
          in: path
          description: The ID of the chat.
          required: true
          schema:
            pattern: cht_.+$
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: A response to a chat request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatFullResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ChatStreamedResponse'
        '400':
          description: Turn creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating a turn in the chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or chat not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-stream-based-on-body: streamResponse()
      x-fern-streaming:
        format: sse
        stream-condition: $request.stream_response
        response:
          $ref: '#/components/schemas/ChatFullResponse'
        response-stream:
          $ref: '#/components/schemas/ChatStreamedResponse'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: createTurns
    get:
      tags:
        - Chats
      summary: List turns in a chat
      description: List all turns in a chat to see all message and response pairs that make up the dialog.
      operationId: listChatTurns
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: chat_id
          in: path
          description: The ID of the chat.
          required: true
          schema:
            pattern: cht_.+$
            type: string
      responses:
        '200':
          description: List of turns.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListChatTurnsResponse'
        '403':
          description: Permissions do not allow listing turns in the chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Corpus or chat not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: listTurns
  '/v2/chats/{chat_id}/turns/{turn_id}':
    get:
      tags:
        - Chats
      summary: Get a turn
      description: 'Get a specific turn from a chat, which is a message and response pair from the conversation.'
      operationId: getChatTurn
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: chat_id
          in: path
          description: The ID of the chat.
          required: true
          schema:
            pattern: cht_.+$
            type: string
        - name: turn_id
          in: path
          description: The ID of the turn.
          required: true
          schema:
            pattern: trn_.+$
            type: string
      responses:
        '200':
          description: The turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Turn'
        '403':
          description: Permissions do not allow getting the turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Corpus, chat, or turn not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: getTurn
    delete:
      tags:
        - Chats
      summary: Delete a turn
      description: Delete a turn from a chat. This will delete all subsequent turns in the chat.
      operationId: deleteChatTurn
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: chat_id
          in: path
          description: The ID of the chat.
          required: true
          schema:
            pattern: cht_.+$
            type: string
        - name: turn_id
          in: path
          description: The ID of the turn.
          required: true
          schema:
            pattern: trn_.+$
            type: string
      responses:
        '204':
          description: Successfully deleted a turn.
        '403':
          description: Permissions do not allow deleting the turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Corpus, chat, or turn not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: deleteTurn
    patch:
      tags:
        - Chats
      summary: Update a turn
      description: Update a turn; used to disable or enable a chat.
      operationId: updateChatTurn
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: chat_id
          in: path
          description: The ID of the chat.
          required: true
          schema:
            pattern: cht_.+$
            type: string
        - name: turn_id
          in: path
          description: The ID of the turn.
          required: true
          schema:
            pattern: trn_.+$
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTurnRequest'
      responses:
        '200':
          description: Successfully modified the turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Turn'
        '403':
          description: Permissions do not allow updating the turn.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Corpus, chat, or turn not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: chats
      x-fern-sdk-method-name: updateTurn
  /v2/evaluate_factual_consistency:
    post:
      tags:
        - Factual Consistency Evaluation
      summary: Evaluate factual consistency
      description: 'Evaluate the factual consistency of a generated text (like a summary) against source documents. This determines how accurately the generated text reflects the information in the source documents, helping identify potential hallucinations or misrepresentations.'
      operationId: evaluateFactualConsistency
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateFactualConsistencyRequest'
      responses:
        '200':
          description: The factual consistency evaluation results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluateFactualConsistencyResponse'
        '400':
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow factual consistency evaluation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Language not supported by the factual consistency service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: factual-consistency
      x-fern-sdk-method-name: evaluate
  /v2/encoders:
    post:
      tags:
        - Encoders
      summary: Create an encoder
      description: Create a new encoder.
      operationId: createEncoder
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEncoderRequest'
      responses:
        '201':
          description: The encoder has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Encoder'
        '400':
          description: Encoder creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating an encoder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: encoders
      x-fern-sdk-method-name: create
    get:
      tags:
        - Encoders
      summary: List encoders
      description: Encoders are used to store and retrieve from a corpus.
      operationId: listEncoders
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: filter
          in: query
          description: A regular expression against encoder names and descriptions.
          schema:
            type: string
            example: vectara.*
        - name: limit
          in: query
          description: The maximum number of results to return in the list.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 10
        - name: page_key
          in: query
          description: Used to retrieve the next page of encoders after the limit has been reached.
          schema:
            type: string
      responses:
        '200':
          description: List of encoders.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEncodersResponse'
        '403':
          description: Permissions do not allow listing encoders.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: encoders
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.encoders
  /v2/rerankers:
    get:
      tags:
        - Rerankers
      summary: List rerankers
      description: Rerankers are used to improve the ranking (ordering) of search results.
      operationId: listRerankers
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: filter
          in: query
          description: A regular expression against reranker names and descriptions.
          schema:
            type: string
            example: vectara.*
        - name: limit
          in: query
          description: The maximum number of rerankers to return in the list.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 10
        - name: page_key
          in: query
          description: Used to retrieve the next page of rerankers after the limit has been reached.
          schema:
            type: string
      responses:
        '200':
          description: List of rerankers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRerankersResponse'
        '403':
          description: Permissions do not allow listing rerankers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: rerankers
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.rerankers
  /v2/table_extractors:
    get:
      tags:
        - Table Extractors
      summary: List supported table extractors
      description: Table extractors are used to extract tabular data from documents during indexing.
      operationId: listTableExtractors
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
      responses:
        '200':
          description: List of supported table extractors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTableExtractorsResponse'
        '403':
          description: Permissions do not allow listing table extractors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: table_extractors
      x-fern-sdk-method-name: list
  /v2/hallucination_correctors:
    get:
      tags:
        - Hallucination Correctors
      summary: List hallucination correctors
      description: 'Retrieves a list of available hallucination correctors used for detecting and correcting hallucinations in AI-generated content. This endpoint supports filtering by name or description, pagination, and metadata for navigating large result sets.'
      operationId: listHallucinationCorrectors
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: filter
          in: query
          description: A regular expression applied to the name and description fields. Use this to return only hallucination correctors that match specific keywords or naming conventions.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of hallucination correctors to return in the list. Defaults to 10. Range is between 1 and 100.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 10
        - name: page_key
          in: query
          description: Retrieves the next page of hallucination correctors after reaching the limit.
          schema:
            type: string
      responses:
        '200':
          description: List of hallucination correctors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListHallucinationCorrectorsResponse'
        '403':
          description: Permissions do not allow listing hallucination correctors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: hallucination_correctors
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.hallucinationCorrectionModels
  /v2/hallucination_correctors/correct_hallucinations:
    post:
      tags:
        - Hallucination Correctors
      summary: Corrects hallucinations in generated text based on source documents
      description: This endpoint identifies information in generated text that is not supported by the provided source documents and offers corrections with minimal changes. This can be used standalone or as part of a RAG workflow where the HHEM score indicates potential hallucinations.
      operationId: correctHallucinations
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HallucinationCorrectionRequest'
        required: true
      responses:
        '200':
          description: Successfully analyzed the text for hallucinations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HallucinationCorrectionResponse'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow hallucination correction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: hallucination_correctors
      x-fern-sdk-method-name: hallucinationCorrection
  /v2/jobs:
    get:
      tags:
        - Jobs
      summary: List jobs
      description: List jobs for the account. Jobs are background processes like replacing the filterable metadata attributes.
      operationId: listJobs
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: query
          description: The unique key identifying the corpus with the job.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CorpusKey'
        - name: after
          in: query
          description: Filter by jobs created after a particular date-time.
          schema:
            type: string
            format: date-time
        - name: state
          in: query
          description: Filter by jobs in particular states.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/JobState'
        - name: limit
          in: query
          description: The maximum number of jobs to return at one time.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 10
        - name: page_key
          in: query
          description: Used to retrieve the next page of jobs after the limit has been reached.
          schema:
            type: string
      responses:
        '200':
          description: List of jobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListJobsResponse'
        '403':
          description: Permissions do not allow listing jobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: jobs
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.jobs
  '/v2/jobs/{job_id}':
    get:
      tags:
        - Jobs
      summary: Get a job by ID
      description: Get a job by a specific ID. Jobs are background processes like replacing the filterable metadata attributes.
      operationId: getJob
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: job_id
          in: path
          description: The ID of the job to get.
          required: true
          schema:
            pattern: job_.+$
            type: string
      responses:
        '200':
          description: A job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '403':
          description: Permissions do not allow retrieving a job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: jobs
      x-fern-sdk-method-name: get
  /v2/users:
    post:
      tags:
        - Users
      summary: Create a user in the current customer account
      description: Create a user for the current customer account.
      operationId: createUser
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: The created user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - properties:
                      one_time_code:
                        type: string
                        description: 'A one time code for the newly created user to create a password. This is optional, and is only populated for some Vectara deployments.'
                      one_time_code_link:
                        type: string
                        description: 'The link where to enter the `one_time_code`. This is optional, and is only populated for some Vectara deployments.'
        '400':
          description: User creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow retrieving a user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: create
    get:
      tags:
        - Users
      summary: List users in the account
      description: Lists all users in the account.
      operationId: listUsers
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: limit
          in: query
          description: The maximum number of users to return at one time.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 10
        - name: page_key
          in: query
          description: Used to retrieve the next page of users after the limit has been reached.
          schema:
            type: string
        - name: corpus_key
          in: query
          description: Filter users by access to this corpus.
          schema:
            $ref: '#/components/schemas/CorpusKey'
      responses:
        '200':
          description: List of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        '403':
          description: Permissions do not allow listing users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.users
  '/v2/users/{username}':
    get:
      tags:
        - Users
      summary: Get a user
      description: 'Get a user and view details like the email, username, and associated roles.'
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: username
          in: path
          description: Specifies the user ID that to retrieve. Note that the username must be percent encoded.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Permissions do not allow retrieving the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: get
    patch:
      tags:
        - Users
      summary: Update a user
      description: Update details about a user such as role names.
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: username
          in: path
          description: Specifies the user ID to update. Note that the username must be percent encoded.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: New user after modification.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Permissions do not allow updating the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: update
    delete:
      tags:
        - Users
      summary: Delete a user
      description: Delete a user from the account.
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: username
          in: path
          description: Specifies the user ID to delete. Note that the username must be percent encoded.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User was successfully deleted.
        '403':
          description: Permissions do not allow deleting the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: delete
  '/v2/users/{username}/reset_password':
    post:
      tags:
        - Users
      summary: Reset the password for a user
      description: Reset the password for a user.
      operationId: resetUserPassword
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: username
          in: path
          description: Specifies the user ID to update. Note that the username must be percent encoded and URI safe.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User was sent the password reset email.
          content:
            application/json:
              schema:
                type: object
                properties:
                  one_time_code:
                    type: string
                    description: 'A one time code that can be used to reset the password. This is optional, and is only populated for some Vectara deployments.'
                  one_time_code_link:
                    type: string
                    description: 'The link where to enter the `one_time_code`. This is optional, and is only populated for some Vectara deployments.'
        '403':
          description: Permissions do not allow resetting the user password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: resetPassword
  /v2/api_keys:
    post:
      tags:
        - API Keys
      summary: Create an API key
      description: An API key is to authenticate when calling Vectara APIs.
      operationId: createApiKey
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: 'An API key object, used to query the Vectara API with the assigned roles.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          description: API key creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating the API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: apiKeys
      x-fern-sdk-method-name: create
    get:
      tags:
        - API Keys
      summary: List API keys
      description: Retrieve a list of API keys for the customer account with optional filtering.
      operationId: listApiKeys
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: limit
          in: query
          description: Max number of API keys to return at one time.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 10
        - name: page_key
          in: query
          description: Used to retrieve the next page of API keys after the limit has been reached.
          schema:
            type: string
        - name: corpus_key
          in: query
          description: Filters the API keys to only those with permissions on the specified corpus key.
          schema:
            $ref: '#/components/schemas/CorpusKey'
        - name: api_key_role
          in: query
          description: Filter API keys by their role.
          schema:
            $ref: '#/components/schemas/ApiKeyRole'
      responses:
        '200':
          description: An array of API keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiKeysResponse'
        '400':
          description: API key list request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow listing API keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: apiKeys
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.api_keys
  '/v2/api_keys/{api_key_id}':
    get:
      tags:
        - API Keys
      summary: Get an API key
      description: Retrieve details of a specific API key by its ID.
      operationId: getApiKey
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: api_key_id
          in: path
          description: The ID of the API key.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '403':
          description: Permissions do not allow getting this API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: apiKeys
      x-fern-sdk-method-name: get
    patch:
      tags:
        - API Keys
      summary: Update an API key
      description: Update an API key such as the roles attached to the key.
      operationId: updateApiKey
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: api_key_id
          in: path
          description: The ID of the API key.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKeyRequest'
      responses:
        '200':
          description: The API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '403':
          description: Permissions do not allow getting this API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: apiKeys
      x-fern-sdk-method-name: update
    delete:
      tags:
        - API Keys
      summary: Delete an API key
      description: Delete API keys to help you manage the security and lifecycle of API keys in your application.
      operationId: deleteApiKey
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: api_key_id
          in: path
          description: The ID of the API key.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The API key was deleted.
        '403':
          description: Permissions do not allow deleting this API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: apiKeys
      x-fern-sdk-method-name: delete
  /v2/app_clients:
    post:
      tags:
        - Application Clients
      summary: Create an App Client
      description: An App Client is used for OAuth 2.0 authentication when calling Vectara APIs.
      operationId: createAppClient
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAppClientRequest'
      responses:
        '201':
          description: 'An App Client object, used to query the Vectara API with the assigned roles.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppClient'
        '400':
          description: App Client creation request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating the App Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: appClients
      x-fern-sdk-method-name: create
    get:
      tags:
        - Application Clients
      summary: List App Clients
      description: Retrieve a list of application clients configured for the customer account.
      operationId: listAppClient
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: limit
          in: query
          description: The maximum number of App Clients to return at one time.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            default: 10
        - name: filter
          in: query
          description: Regular expression to filter the names of the App Clients.
          schema:
            type: string
        - name: page_key
          in: query
          description: Used to retrieve the next page of App Clients after the limit has been reached.
          schema:
            type: string
      responses:
        '200':
          description: An array of App Clients.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAppClientsResponse'
        '400':
          description: App Clients list request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow listing App Clients.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: appClients
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.app_clients
  '/v2/app_clients/{app_client_id}':
    get:
      tags:
        - Application Clients
      summary: Get an App Client
      description: Retrieve details of a specific application client by its ID.
      operationId: getAppClient
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: app_client_id
          in: path
          description: The ID of the App Client.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The App Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppClient'
        '403':
          description: Permissions do not allow getting this App Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: appClients
      x-fern-sdk-method-name: get
    patch:
      tags:
        - Application Clients
      summary: Update an App Client
      description: Update the configuration or settings of an existing application client.
      operationId: updateAppClient
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: app_client_id
          in: path
          description: The name of App Client.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAppClientRequest'
      responses:
        '200':
          description: The App Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppClient'
        '403':
          description: Permissions do not allow updating this App Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: appClients
      x-fern-sdk-method-name: update
    delete:
      tags:
        - Application Clients
      summary: Delete an App Client
      description: Remove an application client configuration from the customer account.
      operationId: deleteAppClient
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: app_client_id
          in: path
          description: The ID of App Client.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The App Client was deleted.
        '403':
          description: Permissions do not allow deleting this App Client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: appClients
      x-fern-sdk-method-name: delete
  '/v2/queries/{query_id}':
    get:
      tags:
        - Query History
      summary: Get a query history
      description: Retrieve a detailed history of previously executed query.
      operationId: getQueryHistory
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: query_id
          in: path
          description: The ID of the query history
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The query history.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryHistory'
        '403':
          description: Permissions do not allow retrieving the query history.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Query history not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      x-fern-sdk-group-name: query_history
      x-fern-sdk-method-name: get
  /v2/queries:
    get:
      tags:
        - Query History
      summary: List the history of previous queries
      description: Retrieve query histories.
      operationId: getQueryHistories
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
        - name: corpus_key
          in: query
          description: Specifies the `corpus_key` used in the query.
          schema:
            type: string
        - name: started_after
          in: query
          description: Queries that started after a particular date-time.
          schema:
            type: string
            format: date-time
        - name: started_before
          in: query
          description: Queries that started before a particular date-time.
          schema:
            type: string
            format: date-time
        - name: chat_id
          in: query
          description: 'Specifies the chat_id of the query, this will return all queries in the specified chat.'
          schema:
            type: string
        - name: limit
          in: query
          description: Specifies the maximum number of query history listed.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            default: 10
        - name: page_key
          in: query
          description: Used to retrieve the next page of query histories after the limit has been reached.
          schema:
            type: string
      responses:
        '200':
          description: An array of Query Histories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueryHistoriesResponse'
        '400':
          description: Query history list request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow listing query histories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-fern-sdk-group-name: query_history
      x-fern-sdk-method-name: list
      x-fern-pagination:
        cursor: $request.page_key
        next_cursor: $response.metadata.page_key
        results: $response.queries
  /oauth/token:
    post:
      tags:
        - Authentication
      summary: Request an access token
      description: Obtain an OAuth2 access token using client credentials
      operationId: getOAuthToken
      requestBody:
        content:
          application/json:
            schema:
              required:
                - client_id
                - client_secret
                - grant_type
              type: object
              properties:
                client_id:
                  type: string
                  description: The client ID of the application
                client_secret:
                  type: string
                  description: The client secret of the application
                grant_type:
                  x-fern-type: literal<"client_credentials">
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                required:
                  - access_token
                  - token_type
                  - expires_in
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                  expires_in:
                    type: integer
                x-fern-type-name: GetTokenResponse
      x-fern-sdk-group-name:
        - auth
      x-fern-sdk-method-name: getToken
      x-fern-server-name: Auth
  /v2/llms/chat/completions:
    post:
      tags:
        - LLM Chat Completions
      summary: Creates a model response for the given chat conversation
      description: OpenAI-compatible endpoint for chat completions. Creates a response for the given chat conversation. The chat completion API allows you to chat with Vectara's language models in a way that's compatible with OpenAI's specification. This makes it easy to integrate with applications already designed for OpenAI's API.
      operationId: createChatCompletion
      parameters:
        - $ref: '#/components/parameters/RequestTimeout'
        - $ref: '#/components/parameters/RequestTimeoutMillis'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatCompletionRequest'
        required: true
      responses:
        '200':
          description: A chat completion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionStreamResponse'
        '400':
          description: Chat completion request was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: Permissions do not allow creating a chat completion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-stream-based-on-body: stream()
      x-fern-sdk-group-name: llm
      x-fern-sdk-method-name: chatCompletion
components:
  schemas:
    CreateCorpusRequest:
      required:
        - key
      type: object
      properties:
        key:
          $ref: '#/components/schemas/CorpusKey'
        name:
          type: string
          description: The name for the corpus. This value defaults to the key.
          example: My corpus
        description:
          type: string
          description: Description of the corpus.
          example: Documents with important information for my prompt.
        save_history:
          type: boolean
          description: Indicates whether to save corpus queries to query history by default.
          default: false
        queries_are_answers:
          type: boolean
          description: 'Queries made to this corpus are considered answers, and not questions.'
          default: false
        documents_are_questions:
          type: boolean
          description: 'Documents inside this corpus are considered questions, and not answers.'
          default: false
        encoder_id:
          pattern: 'enc_[0-9]+$'
          type: string
          description: '*Deprecated*: Use `encoder_name` instead.'
          example: enc_1
          deprecated: true
        encoder_name:
          type: string
          description: 'The encoder used by the corpus, `boomerang-2023-q3`.'
          example: boomerang-2023-q3
        filter_attributes:
          type: array
          items:
            $ref: '#/components/schemas/FilterAttribute'
          description: The new filter attributes of the corpus. If unset then the corpus will not have filter attributes.
        custom_dimensions:
          type: array
          items:
            $ref: '#/components/schemas/CorpusCustomDimension'
          description: A custom dimension is an additional numerical field attached to a document part. You can then multiply this numerical field with a query time custom dimension of the same name. This allows boosting (or burying) document parts for arbitrary reasons. This feature is only enabled for Pro and Enterprise customers.
      description: Request object for creating a new corpus in the Vectara platform.
    UpdateCorpusRequest:
      type: object
      properties:
        enabled:
          type: boolean
          description: Set whether or not the corpus is enabled. If unset then the corpus will remain in the same state.
          example: false
        name:
          type: string
          description: 'The name for the corpus. If unset or null, then the corpus will remain in the same state.'
          example: new-name
        description:
          type: string
          description: 'Description of the corpus. If unset or null, then the corpus will remain in the same state.'
          example: New description of the corpus.
        save_history:
          type: boolean
          description: Indicates whether to save corpus queries to query history by default.
      description: Corpus properties that are modifiable after creation.
    ReplaceFilterAttributesRequest:
      required:
        - filter_attributes
      type: object
      properties:
        filter_attributes:
          type: array
          items:
            $ref: '#/components/schemas/FilterAttribute'
          description: The new filter attributes.
      description: Request to replace all filter attributes for a corpus with a new set of attributes.
    ReplaceFilterAttributesResponse:
      required:
        - job_id
      type: object
      properties:
        job_id:
          pattern: job_.+$
          type: string
          description: Job that was created in order to replace filter attributes.
      description: Response containing the job ID for the filter attributes replacement operation.
    CorpusKey:
      maxLength: 50
      pattern: '[a-zA-Z0-9_\=\-]+$'
      type: string
      description: A user-provided key for a corpus.
      example: my-corpus
    Corpus:
      type: object
      properties:
        id:
          pattern: 'crp_[0-9]+$'
          type: string
          description: Vectara ID of the corpus.
        key:
          $ref: '#/components/schemas/CorpusKey'
        name:
          type: string
          description: Name for the corpus. This value defaults to the key.
        description:
          type: string
          description: Corpus description.
        enabled:
          type: boolean
          description: Specifies whether the corpus is enabled or not.
        chat_history_corpus:
          type: boolean
          description: Indicates that this corpus does not store documents and stores chats instead.
        queries_are_answers:
          type: boolean
          description: 'Queries made to this corpus are considered answers, and not questions. This swaps the semantics of the encoder used at query time.'
          default: false
        documents_are_questions:
          type: boolean
          description: 'Documents inside this corpus are considered questions, and not answers. This swaps the semantics of the encoder used at indexing.'
          default: false
        encoder_id:
          pattern: 'enc_[0-9]+$'
          type: string
          description: 'The encoder used by the corpus. *Deprecated*: Use `encoder_name` instead'
          deprecated: true
        encoder_name:
          type: string
          description: 'The encoder used by the corpus, `boomerang-2023-q3`.'
          example: boomerang-2023-q3
        save_history:
          type: boolean
          description: Indicates whether to save corpus queries to query history by default.
        filter_attributes:
          type: array
          items:
            $ref: '#/components/schemas/FilterAttribute'
          description: The new filter attributes of the corpus.
        custom_dimensions:
          type: array
          items:
            $ref: '#/components/schemas/CorpusCustomDimension'
          description: The custom dimensions of all document parts inside the corpus.
        limits:
          title: CorpusLimits
          type: object
          properties:
            used_docs:
              type: integer
              description: The number of documents contained in the corpus.
              format: int64
            used_parts:
              type: integer
              description: The number of document parts contained in the corpus.
              format: int64
            used_bytes:
              type: integer
              description: 'NOTE: This field is currently not populated by the system. The number of bytes contained in the corpus. This includes the document metadata, document part metadata, and document contents.'
              format: int64
            used_characters:
              type: integer
              description: 'The number of characters contained in the corpus. This includes the document metadata, document part metadata, and document contents.'
              format: int64
            max_bytes:
              type: integer
              description: 'NOTE: This field is currently not populated by the system. The maximum number of bytes the corpus can be.'
              format: int64
            max_metadata_bytes:
              type: integer
              description: The maximum size that metadata can be on documents.
              format: int64
            index_rate:
              type: integer
              description: 'NOTE: This field is currently not populated by the system. The maximum per-second addition of new documents to corpus.'
              format: int64
        created_at:
          type: string
          description: Indicates when the corpus was created.
          format: date-time
      description: 'A corpus is a collection of documents and associated configuration for indexing, searching, and generating responses through RAG.'
    CorpusCustomDimension:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the custom dimension.
          example: importance
        description:
          type: string
          description: Description of the custom dimension.
          example: Product importance.
        indexing_default:
          type: number
          description: Default value of a custom dimension on a document part if the custom dimension value is not specified when the document part is indexed. A value of 0 means that custom dimension is not considered.
          format: double
          default: 0
          example: 0
        querying_default:
          type: number
          description: Default value of a custom dimension for a query if the value of the custom dimension is not specified when querying the corpus. A value of 0 means that custom dimension is not considered.
          format: double
          default: 0
          example: 0
      description: Custom dimensions attached to all document parts in a corpus. Allows arbitrary modification of the score for many purposes.
    FilterAttribute:
      required:
        - name
        - level
        - type
      type: object
      properties:
        name:
          type: string
          description: The JSON path of the filter attribute in a document or document part metadata.
          example: Title
        level:
          enum:
            - document
            - part
          type: string
          description: Indicates whether this is a document or document part metadata filter.
          example: document
        description:
          type: string
          description: Description of the filter. May be omitted.
          example: The title of the document.
        indexed:
          type: boolean
          description: Indicates whether an index should be created for the filter. Creating an index will improve query latency when using the filter.
          default: true
        type:
          enum:
            - integer
            - real_number
            - text
            - boolean
            - 'list[integer]'
            - 'list[real_number]'
            - 'list[text]'
          type: string
          description: The value type of the filter.
          example: text
      description: Defines a filter attribute that can be used to filter search results based on document metadata for precise retrieval.
    ListCorporaResponse:
      type: object
      properties:
        corpora:
          type: array
          items:
            $ref: '#/components/schemas/Corpus'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      description: Response containing a list of corpora within a customer account.
    SearchParameters:
      type: object
      properties:
        offset:
          minimum: 0
          type: integer
          description: Specifies how many results into the result to skip. This is useful for pagination.
          format: int32
          default: 0
        limit:
          minimum: 1
          type: integer
          description: The maximum number of results returned.
          format: int32
          default: 10
        context_configuration:
          $ref: '#/components/schemas/ContextConfiguration'
        reranker:
          $ref: '#/components/schemas/SearchReranker'
      description: Search parameters to retrieve knowledge for the query.
    ContextConfiguration:
      type: object
      properties:
        characters_before:
          minimum: 0
          type: integer
          description: 'The number of characters that are shown before the matching document part. This is useful to show the context of the document part in the wider document. Ignored if `sentences_before` is set. Vectara will capture the full sentence that contains the captured characters, to not lose the meaning caused by a truncated word or sentence.'
          format: int32
          default: 0
          example: 30
        characters_after:
          minimum: 0
          type: integer
          description: 'The number of characters that are shown after the matching document part. This is useful to show the context of the document part in the wider document. Ignored if `sentences_after` is set. Vectara will capture the full sentence that contains the captured characters, to not lose the meaning caused by a truncated word or sentence.'
          format: int32
          default: 0
          example: 30
        sentences_before:
          minimum: 0
          type: integer
          description: The number of sentences that are shown before the matching document part. This is useful to show the context of the document part in the wider document.
          format: int32
          default: 0
          example: 3
        sentences_after:
          minimum: 0
          type: integer
          description: The number of sentences that are shown after the matching document part. This is useful to show the context of the document part in the wider document.
          format: int32
          default: 0
          example: 3
        start_tag:
          type: string
          description: The tag that wraps the document part at the start. This is often used to provide a start HTML/XML tag or some other delimiter you can use in an application to understand where to provide highlighting in your UI and understand where the context before ends and the document part begins.
          example: <em>
        end_tag:
          type: string
          description: The tag that wraps the document part at the end. This is often used to provide a start HTML/XML tag or some other delimiter you can use in an application to understand where to provide highlighting in your UI and understand where the context before ends and the document part begins.
          example: </em>
      description: Configuration on the presentation of each document part in the result set.
    GenerationParameters:
      type: object
      properties:
        generation_preset_name:
          minLength: 1
          type: string
          description: "The preset values to use to feed the query results and other context to the model.\nA `generation_preset` is an object with a bundle of properties that specifies: * The `prompt_template` that is rendered and then sent to the LLM. * The LLM used. * `model_parameter`s such as temperature.\nAll of these properties except the model can be overridden by setting them in this object. Even when a `prompt_template` is set, the `generation_preset_name` is used to set the model used. See `model_parameters.model` if you want to set the model explicitly.\nIf `generation_preset_name` is not set, the Vectara platform will use the default model and prompt."
          example: vectara-summary-ext-v1.2.0
        prompt_name:
          minLength: 1
          type: string
          description: Use `generation_preset_name` instead of `prompt_name`.
          example: vectara-summary-ext-v1.2.0
          deprecated: true
        max_used_search_results:
          minimum: 0
          type: integer
          description: The maximum number of search results to be available to the prompt.
          format: int32
          default: 5
        prompt_template:
          type: string
          description: 'Vectara manages both system and user roles and prompts for the generative LLM out of the box by default. However, users can override the `prompt_template` via this variable. The `prompt_template` is in the form of an Apache Velocity template. For more details on how to configure the `prompt_template`, see the [long-form documentation](https://docs.vectara.com/docs/prompts/vectara-prompt-engine).'
          example: "[\n  {\"role\": \"system\", \"content\": \"You are a helpful search assistant.\"},\n  #foreach ($qResult in $vectaraQueryResults)\n     {\"role\": \"user\", \"content\": \"Given the $vectaraIdxWord[$foreach.index] search result.\"},\n     {\"role\": \"assistant\", \"content\": \"${qResult.getText()}\" },\n  #end\n  {\"role\": \"user\", \"content\": \"Generate a summary for the query '${vectaraQuery}' based on the above results.\"}\n]\n"
        prompt_text:
          type: string
          description: This property is deprecated in favor of clearer naming. Use `prompt_template`. This property will be ignored if `prompt_template` is set.
          example: "[\n  {\"role\": \"system\", \"content\": \"You are a helpful search assistant.\"},\n  #foreach ($qResult in $vectaraQueryResults)\n     {\"role\": \"user\", \"content\": \"Given the $vectaraIdxWord[$foreach.index] search result.\"},\n     {\"role\": \"assistant\", \"content\": \"${qResult.getText()}\" },\n  #end\n  {\"role\": \"user\", \"content\": \"Generate a summary for the query '${vectaraQuery}' based on the above results.\"}\n]\n"
          deprecated: true
        max_response_characters:
          minimum: 0
          type: integer
          description: 'Controls the length of the generated output. This is a rough estimate and not a hard limit: the end output can be longer or shorter than this value. This is generally implemented by including the `max_response_characters` in the prompt, and the LLM''s instruction following capability dictates how closely the generated output is limited.'
          format: int32
          example: 300
        response_language:
          $ref: '#/components/schemas/Language'
        model_parameters:
          title: ModelParameters
          type: object
          properties:
            llm_name:
              type: string
              description: 'The model (e.g., `gpt-4`) to use for summarization. If specified, it will override the model behind `generation_preset_name`.'
              example: gpt4
            max_tokens:
              minimum: 1
              type: integer
              description: The maximum number of tokens to be returned by the model.
              format: int32
            temperature:
              type: number
              description: 'The sampling temperature to use. Higher values make the output more random, while lower values make it more focused and deterministic.'
              format: float
            frequency_penalty:
              type: number
              description: 'Higher values penalize new tokens based on their existing frequency in the text so far, decreasing the model''s likelihood to repeat the same line verbatim.'
              format: float
            presence_penalty:
              type: number
              description: 'Higher values penalize new tokens based on whether they appear in the text so far, increasing the model''s likelihood to talk about new topics.'
              format: float
          description: 'The parameters for the model. WARNING: This is an experimental feature, and breakable at any point with virtually no notice. It is meant for experimentation to converge on optimal parameters that can then be set in the prompt definitions.'
        citations:
          $ref: '#/components/schemas/CitationParameters'
        enable_factual_consistency_score:
          type: boolean
          description: Enable returning the factual consistency score with query results.
          default: true
      description: The parameters to control generation.
    CitationParameters:
      type: object
      properties:
        style:
          enum:
            - none
            - numeric
            - html
            - markdown
          type: string
          description: 'The citation style to be used in summary. Can be one of: * `numeric` - Citations formatted as simple numerals: \[1\], \[2\] ... * `none` - Citations removed from text. * `html` - Citation formatted as a URL like `<a href="url_pattern">text_pattern</a>`. * `markdown` - Formatted as `[text_pattern](url_pattern)`.'
        url_pattern:
          type: string
          description: 'The URL pattern if the citation_style is set to `html` or `markdown`. The pattern can access metadata attributes in the document or part. e.g. `https://my.doc/foo/{doc.id}/{part.id}` The default `url_pattern` is an empty string.'
          example: 'https://vectara.com/documents/{doc.id}'
        text_pattern:
          type: string
          description: 'The text pattern if the citation_style is set to `html` or `markdown`. This pattern sets the href for HTML or the text within `[]` in markdown, and defaults to N being the index of result if it is not set. The default citation style looks like `[N](<url_pattern>)` for markdown. You can use metadata attributes in the `text_pattern`. For example, the pattern `{doc.title}` with citation style `markdown` would result in final citation output like `[Title](<url_pattern>)` when the document''s metadata includes `{"title":"Title"}`.'
          example: '{doc.title}'
      description: Style the generator should use when making citations.
    QueryRequest:
      required:
        - query
        - search
      type: object
      properties:
        query:
          type: string
          description: 'The search query string, which is the question the user is asking.'
          example: Am I allowed to bring pets to work?
        search:
          $ref: '#/components/schemas/SearchCorporaParameters'
        generation:
          $ref: '#/components/schemas/GenerationParameters'
        stream_response:
          type: boolean
          description: Indicates whether the response should be streamed or not.
          default: false
        save_history:
          type: boolean
          description: Indicates whether to save the query to query history.
        intelligent_query_rewriting:
          type: boolean
          description: '[Tech Preview] Indicates whether to enable intelligent query rewriting. When enabled, the platform will attempt to extract metadata filter and rewrite the query to improve search results. Read [here](https://docs.vectara.com/docs/search-and-retrieval/intelligent-query-rewriting) for more details.'
          default: false
      description: Query one or more corpora.
    SearchCorporaParameters:
      required:
        - corpora
      allOf:
        - type: object
          properties:
            corpora:
              minItems: 1
              type: array
              items:
                $ref: '#/components/schemas/KeyedSearchCorpus'
              description: The corpora that you want to search.
        - $ref: '#/components/schemas/SearchParameters'
      description: The parameters to search one or more corpora.
    QueryCorpusRequest:
      required:
        - query
      type: object
      properties:
        query:
          type: string
          description: 'The search query string, which is the question the user is asking.'
        search:
          title: SearchCorpusParameters
          allOf:
            - $ref: '#/components/schemas/SearchCorpus'
            - $ref: '#/components/schemas/SearchParameters'
          description: The parameters to search one corpus.
        generation:
          $ref: '#/components/schemas/GenerationParameters'
        stream_response:
          type: boolean
          description: Indicates whether the response should be streamed or not.
          default: false
        save_history:
          type: boolean
          description: Indicates whether to save the query to query history.
        intelligent_query_rewriting:
          type: boolean
          description: '[Tech Preview] Indicates whether to enable intelligent query rewriting. When enabled, the platform will attempt to extract metadata filter and rewrite the query to improve search results. Read [here](https://docs.vectara.com/docs/search-and-retrieval/intelligent-query-rewriting) for more details.'
          default: false
      description: Request to search a specific corpus within a customer account and optionally generate a response using RAG techniques.
    SearchCorpus:
      type: object
      properties:
        custom_dimensions:
          $ref: '#/components/schemas/CustomDimensions'
        metadata_filter:
          type: string
          description: 'The filter string used to narrow the search based on metadata attributes. The query against this corpus will be confined to document parts that match the `metadata_filter`. Only metadata fields set as `filter_attributes` on the corpus can be filtered. Filter syntax is similar to a SQL WHERE clause. See [metadata filters documentation](https://docs.vectara.com/docs/learn/metadata-search-filtering/filter-overview) for more information.'
          example: doc.title = 'Charlotte''s Web'
        lexical_interpolation:
          maximum: 1
          minimum: 0
          type: number
          description: 'How much to weigh lexical scores compared to the embedding score. 0 means lexical search is not used at all, and 1 means only lexical search is used.'
          format: float
          example: 0.025
        semantics:
          $ref: '#/components/schemas/SearchSemantics'
      description: 'Configuration for search parameters specific to a single corpus within a customer account, including filters and semantics.'
    SearchSemantics:
      enum:
        - default
        - query
        - response
      type: string
      description: Indicates whether to consider a query against this corpus as a query or a response.
      default: default
    KeyedSearchCorpus:
      required:
        - corpus_key
      allOf:
        - $ref: '#/components/schemas/SearchCorpus'
        - type: object
          properties:
            corpus_key:
              $ref: '#/components/schemas/CorpusKey'
            query:
              type: string
              description: Query for a particular corpus that will override the overall query if present.
      description: A corpus with its identifying key for use in search operations within a customer account.
    SearchReranker:
      type: object
      oneOf:
        - $ref: '#/components/schemas/CustomerSpecificReranker'
        - $ref: '#/components/schemas/UserFunctionReranker'
        - $ref: '#/components/schemas/MMRReranker'
        - $ref: '#/components/schemas/ChainReranker'
        - $ref: '#/components/schemas/NoneReranker'
      description: 'Rerank results of the search. Rerankers are very powerful tools to improve the order of search results. By default the search will use the most powerful reranker available to the customer''s plan. To disable reranking, set the reranker `type` to `"none"`.'
      discriminator:
        propertyName: type
        mapping:
          customer_reranker: '#/components/schemas/CustomerSpecificReranker'
          userfn: '#/components/schemas/UserFunctionReranker'
          mmr: '#/components/schemas/MMRReranker'
          chain: '#/components/schemas/ChainReranker'
          none: '#/components/schemas/NoneReranker'
    CustomerSpecificReranker:
      type: object
      properties:
        type:
          type: string
          description: 'When the type is `customer_reranker`, you can specify the `reranker_name` of a reranker. `reranker_id` is deprecated. The retrieval engine will then rerank results using that reranker.'
          default: customer_reranker
        reranker_id:
          pattern: rnk_(?!272725718)\d+
          type: string
          description: 'The ID of the reranker. The multilingual reranker that may be specified is rnk_272725719. Do not specify the MMR reranker ID here, and instead, use the MMR reranker object type. **Deprecated**: Use `reranker_name` instead.'
          example: rnk_272725719
          deprecated: true
        reranker_name:
          type: string
          description: 'The name of the reranker. Do not specify the MMR reranker name here. Instead, use the MMR reranker object type.'
          example: Rerank_Multilingual_v1
        limit:
          minimum: 1
          type: integer
          description: "Specifies the maximum number of results to be returned after the reranking process. When a reranker is applied, it performs the following steps:\n1. Reranks all input results according to its algorithm.\n2. Sorts the reranked results based on their new scores.\n3. Returns the top N results, where N is the value specified by this limit.\n\nNote: This limit is applied per reranking stage. In a chain of rerankers, each reranker can have its own limit, potentially reducing the number of results at each stage."
          format: int32
        cutoff:
          type: number
          description: "Specifies the minimum score threshold for results to be included after the reranking process. When a reranker is applied with a cutoff, it performs the following steps:\n1. Reranks all input results according to its algorithm. 2. Applies the cutoff, removing any results with scores below the specified threshold. 3. Returns the remaining results, sorted by their new scores.\nNote: This cutoff is applied per reranking stage. In a chain of rerankers, each reranker can have its own cutoff, potentially further reducing the number of results at each stage. If both 'limit' and 'cutoff' are specified, the cutoff is applied first, followed by the limit."
          format: float
        include_context:
          type: boolean
          description: 'If true, the reranker will use text with context (see "context_configuration") for scoring.'
          default: true
      description: Reranker that is specific to the customer.
      x-vectaraParents:
        - SearchReranker
    UserFunctionReranker:
      type: object
      properties:
        type:
          type: string
          description: 'When the type is `userfn`, you can define custom reranking functions using document-level metadata, part-level metadata, or scores generated from the request-level metadata.'
          default: userfn
        user_function:
          type: string
          description: The user defined function.
          example: get('$.score') * get('$.document_metadata.boost')
        limit:
          minimum: 1
          type: integer
          description: "Specifies the maximum number of results to be returned after the reranking process. \nWhen a reranker is applied, it performs the following steps:\n1. Reranks all input results according to its algorithm.\n2. Sorts the reranked results based on their new scores.\n3. Returns the top N results, where N is the value specified by this limit.\n\nNote: This limit is applied per reranking stage. In a chain of rerankers, each reranker can have its own limit, potentially reducing the number of results at each stage."
          format: int32
        cutoff:
          type: number
          description: "Specifies the minimum score threshold for results to be included after the reranking process. When a reranker is applied with a cutoff, it performs the following steps:\n1. Reranks all input results according to its algorithm. 2. Applies the cutoff, removing any results with scores below the specified threshold. 3. Returns the remaining results, sorted by their new scores.\nNote: This cutoff is applied per reranking stage. In a chain of rerankers, each reranker can have its own cutoff, potentially further reducing the number of results at each stage. If both 'limit' and 'cutoff' are specified, the cutoff is applied first, followed by the limit."
          format: float
      description: A reranker that uses user-defined functions to reorder search results.
      x-vectaraParents:
        - SearchReranker
    MMRReranker:
      type: object
      properties:
        type:
          type: string
          description: 'When the type is `mmr`, you can specify the `diversity_bias`, and the retrieval engine will use the MMR reranker.'
          default: mmr
        diversity_bias:
          type: number
          description: The diversity bias. Higher values indicate more diversity.
          format: float
          example: 0.3
        limit:
          minimum: 1
          type: integer
          description: "Specifies the maximum number of results to be returned after the reranking process. \nWhen a reranker is applied, it performs the following steps:\n1. Reranks all input results according to its algorithm.\n2. Sorts the reranked results based on their new scores.\n3. Returns the top N results, where N is the value specified by this limit.\n\nNote: This limit is applied per reranking stage. In a chain of rerankers, each reranker can have its own limit, potentially reducing the number of results at each stage."
          format: int32
        cutoff:
          type: number
          description: "Specifies the minimum score threshold for results to be included after the reranking process. When a reranker is applied with a cutoff, it performs the following steps:\n1. Reranks all input results according to its algorithm. 2. Applies the cutoff, removing any results with scores below the specified threshold. 3. Returns the remaining results, sorted by their new scores.\nNote: This cutoff is applied per reranking stage. In a chain of rerankers, each reranker can have its own cutoff, potentially further reducing the number of results at each stage. If both 'limit' and 'cutoff' are specified, the cutoff is applied first, followed by the limit."
          format: float
      description: A reranker that uses Maximal Marginal Relevance to balance relevance and diversity in search results.
      x-vectaraParents:
        - SearchReranker
    ChainReranker:
      required:
        - rerankers
      type: object
      properties:
        type:
          type: string
          description: 'When the type is `chain`, you can then chain re-rankers together.'
          default: chain
        rerankers:
          maxItems: 50
          type: array
          items:
            $ref: '#/components/schemas/SearchReranker'
          description: Specify an array of rerankers to apply to search results consecutively.
      description: A reranker that applies multiple rerankers in sequence to produce the final search results.
      x-vectaraParents:
        - SearchReranker
    NoneReranker:
      type: object
      properties:
        type:
          type: string
          description: 'When the type is `none`, no reranking will be done.'
          default: none
        limit:
          minimum: 1
          type: integer
          description: "Specifies the maximum number of results to be returned after the reranking process. When a reranker is applied, it performs the following steps:\n1. Reranks all input results according to its algorithm.\n2. Sorts the reranked results based on their new scores.\n3. Returns the top N results, where N is the value specified by this limit.\nNote: This limit is applied per reranking stage. In a chain of rerankers, each reranker can have its own limit, potentially reducing the number of results at each stage."
          format: int32
      description: A placeholder reranker that does not modify the original search results ordering.
      x-vectaraParents:
        - SearchReranker
    QueryFullResponse:
      type: object
      properties:
        summary:
          type: string
          description: The summary of the search results.
        response_language:
          $ref: '#/components/schemas/Language'
        search_results:
          type: array
          items:
            $ref: '#/components/schemas/IndividualSearchResult'
          description: The ranked search results.
        factual_consistency_score:
          type: number
          description: Indicates the probability that the summary is factually consistent with the results. The system excludes this property if it encounters excessively large outputs or search results.
          format: float
        rendered_prompt:
          type: string
          description: The rendered prompt sent to the LLM. Useful when creating customer `prompt_template` templates.
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/QueryWarning'
          description: Non-fatal warnings that occurred during request processing
        rewritten_queries:
          type: array
          items:
            $ref: '#/components/schemas/RewrittenQuery'
          description: The rewritten queries for the corpora that were searched. Only populated when `intelligent_query_rewriting` is enabled.
      description: The full response to a RAG query when the result is not streamed.
    IndividualSearchResult:
      type: object
      properties:
        text:
          type: string
          description: The document part altered by the context configuration that matches the query.
        score:
          type: number
          description: The score of the individual result.
          format: double
        part_metadata:
          type: object
          description: The metadata for the document part.
        document_metadata:
          type: object
          description: The metadata for the document that contains the document part.
        document_id:
          type: string
          description: The ID of the document that contains the document part.
        table:
          $ref: '#/components/schemas/Table'
        request_corpora_index:
          minimum: 0
          type: integer
          description: 'A query request can search over multiple corpora at a time. This property is set to the index in the list of corpora in the original search request that this search result originated from. If the query request is only over one corpus, this property is 0.'
          format: int32
          example: 0
      description: An individual ranked search result from a query.
    RewrittenQuery:
      type: object
      properties:
        corpus_key:
          type: string
          description: The corpus key that the query was made on.
        filter_extraction:
          $ref: '#/components/schemas/FilterExtraction'
      description: The rewritten query for a corpus that was searched.
    RerankedSearchResult:
      type: object
      properties:
        text:
          type: string
          description: The document part altered by the context configuration that matches the query.
        score:
          type: number
          description: The score of the individual result.
          format: double
        original_score:
          type: number
          description: The original score of the individual result before reranking.
          format: double
      description: An individual reranked search result from a query.
    QueryStreamedResponse:
      type: object
      oneOf:
        - $ref: '#/components/schemas/StreamSearchResponse'
        - $ref: '#/components/schemas/StreamGenerationChunk'
        - $ref: '#/components/schemas/StreamGenerationEnd'
        - $ref: '#/components/schemas/StreamResponseEnd'
        - $ref: '#/components/schemas/FactualConsistencyScore'
        - $ref: '#/components/schemas/GenerationInfo'
        - $ref: '#/components/schemas/StreamError'
      description: An individual event sent with Server-sent Events (SSE) when the query request is streamed.
      discriminator:
        propertyName: type
        mapping:
          search_results: '#/components/schemas/StreamSearchResponse'
          generation_chunk: '#/components/schemas/StreamGenerationChunk'
          generation_end: '#/components/schemas/StreamGenerationEnd'
          factual_consistency_score: '#/components/schemas/FactualConsistencyScore'
          generation_info: '#/components/schemas/GenerationInfo'
          error: '#/components/schemas/StreamError'
          end: '#/components/schemas/StreamResponseEnd'
    StreamSearchResponse:
      type: object
      properties:
        type:
          type: string
          description: 'When the streaming event has the search results, the type will be `search_results`.'
          default: search_results
        search_results:
          type: array
          items:
            $ref: '#/components/schemas/IndividualSearchResult'
          description: The ranked search results.
        rewritten_queries:
          type: array
          items:
            $ref: '#/components/schemas/RewrittenQuery'
          description: The rewritten queries for the corpora that were searched. Only populated when `intelligent_query_rewriting` is enabled.
      description: The search response results.
      x-vectaraParents:
        - QueryStreamedResponse
        - ChatStreamedResponse
    StreamGenerationChunk:
      type: object
      properties:
        type:
          type: string
          description: 'When the streaming event contains the next chunk of generator output, the type will be `generation_chunk`.'
          default: generation_chunk
        generation_chunk:
          type: string
          description: Part of the message from the generator. All summary chunks must be appended together in order to get the full summary.
      description: 'The chunk response from the generation, which may be a partial generation.'
      x-vectaraParents:
        - QueryStreamedResponse
        - ChatStreamedResponse
        - SummarizeDocumentStreamedResponse
    FactualConsistencyScore:
      type: object
      properties:
        type:
          type: string
          description: 'When the streaming event contains the factual consistency score, the type will be `factual_consistency_score`.'
          default: factual_consistency_score
        factual_consistency_score:
          type: number
          description: The probability that the summary is factually consistent with the results.
          format: float
      description: Event containing the factual consistency score.
      x-vectaraParents:
        - QueryStreamedResponse
        - ChatStreamedResponse
    GenerationInfo:
      type: object
      properties:
        type:
          type: string
          description: When the streaming event contains the generation information type will be `generation_info`.
          default: generation_info
        rendered_prompt:
          type: string
          description: The rendered prompt sent to the LLM. Useful when creating customer `prompt_template` templates.
        rephrased_query:
          type: string
          description: View the actual query made to backend that was rephrased by the LLM from the input query.
      description: Event containing information on how the generation was accomplished.
      x-vectaraParents:
        - QueryStreamedResponse
        - ChatStreamedResponse
        - SummarizeDocumentStreamedResponse
    StreamError:
      properties:
        type:
          type: string
          description: 'If the stream errors, an event with type `error` will be sent.'
          default: error
        messages:
          type: array
          items:
            type: string
          description: The error messages.
      description: Event signaling there was an error with the request.
      x-vectaraParents:
        - QueryStreamedResponse
        - ChatStreamedResponse
        - SummarizeDocumentStreamedResponse
    StreamGenerationEnd:
      type: object
      properties:
        type:
          type: string
          description: Then end of generation will be denoted with an object with the type `generation_end`.
          default: generation_end
      description: 'The end of generation. There may still be more information such as the factual consistency score, but generation has stopped.'
      x-vectaraParents:
        - QueryStreamedResponse
        - ChatStreamedResponse
        - SummarizeDocumentStreamedResponse
    StreamResponseEnd:
      type: object
      properties:
        type:
          type: string
          description: Then end of stream will be denoted with an object with the type `end`.
          default: end
      description: The end of a query response stream.
      x-vectaraParents:
        - QueryStreamedResponse
        - ChatStreamedResponse
        - SummarizeDocumentStreamedResponse
    UploadFileRequest:
      required:
        - file
      type: object
      properties:
        metadata:
          type: object
          description: Arbitrary object that will be attached as document metadata to the extracted document.
        chunking_strategy:
          $ref: '#/components/schemas/ChunkingStrategy'
        table_extraction_config:
          $ref: '#/components/schemas/TableExtractionConfig'
        filename:
          type: string
          description: Optional multipart section to override the filename.
        file:
          type: string
          description: Binary file contents. The file name of the file will be used as the document ID.
          format: binary
      description: Request to upload and index a file into a corpus within a customer account.
    TableExtractionConfig:
      required:
        - extract_tables
      type: object
      properties:
        extract_tables:
          type: boolean
          description: 'If set to true, the platform will attempt to extract tables from the document. The tables will be indexed as separate document parts.'
        extractor:
          $ref: '#/components/schemas/TableExtractorSpec'
        generation:
          $ref: '#/components/schemas/TableGenerationSpec'
      description: 'Configuration for table extraction from the document. This is optional and if not provided, the platform does not extract tables from PDF files.'
    ChunkingStrategy:
      type: object
      oneOf:
        - $ref: '#/components/schemas/MaxCharsChunkingStrategy'
        - $ref: '#/components/schemas/SentenceChunkingStrategy'
      description: 'Choose how to split documents into chunks during indexing. This is optional - if you do not set a chunking strategy, the platform uses the default strategy which creates one chunk (docpart) per sentence.'
      discriminator:
        propertyName: type
        mapping:
          max_chars_chunking_strategy: '#/components/schemas/MaxCharsChunkingStrategy'
          sentence_chunking_strategy: '#/components/schemas/SentenceChunkingStrategy'
    MaxCharsChunkingStrategy:
      required:
        - max_chars_per_chunk
      type: object
      properties:
        type:
          type: string
          description: 'When setting the type to max_chars_chunking_strategy, you can control the size of chunks (docparts).'
          default: max_chars_chunking_strategy
        max_chars_per_chunk:
          minimum: 100
          type: integer
          description: 'Specifies the maximum number of characters per chunk. The platform adds sentences to a chunk until the total number of characters exceeds the limit. If a single sentence exceeds the limit, it splits the sentence across chunks. Note: This is the only case where the chunk may not contain a complete sentence.'
          format: int32
      description: Sets a chunking strategy that limits the number of maximum characters per chunk. The chunks do not cross section boundaries.
      x-vectaraParents:
        - ChunkingStrategy
    SentenceChunkingStrategy:
      type: object
      properties:
        type:
          type: string
          description: 'When setting the type to sentence_chunking_strategy, the platform will create one chunk per sentence.'
          default: sentence_chunking_strategy
      description: Sets a chunking strategy that creates one chunk per sentence. This is the default strategy used when no chunking strategy is specified.
      x-vectaraParents:
        - ChunkingStrategy
    CreateDocumentRequest:
      required:
        - type
      type: object
      oneOf:
        - $ref: '#/components/schemas/CoreDocument'
        - $ref: '#/components/schemas/StructuredDocument'
      description: 'Creating a document using this endpoint can take multiple forms depending on how much control of the resulting document parts you desire. You can create a document with natural structure, and Vectara will use its proprietary strategy to create document parts. Otherwise, you can create a document with all the document parts explicitly specified. A document part is the search result item in search and Retrieval Augmented Generation endpoints.'
      discriminator:
        propertyName: type
        mapping:
          core: '#/components/schemas/CoreDocument'
          structured: '#/components/schemas/StructuredDocument'
    UpdateDocumentRequest:
      type: object
      properties:
        metadata:
          type: object
          description: The metadata for a document as an arbitrary object. Properties of this object can be used by document level filter attributes.
      description: 'Schema for updating the document. For PUT requests, the request body metadata replaces the existing metadata. For PATCH requests, the request body metadata is merged with the existing metadata, adding or modifying only the specified fields.'
    StructuredDocument:
      required:
        - id
        - type
        - sections
      type: object
      properties:
        id:
          type: string
          description: The document ID must be unique within the corpus.
        type:
          type: string
          description: When the type of the indexed document is `structured` the rest of the object is expected to follow this schema. It allows you to create a document that follows normal document conventions. The Vectara platform will then create document parts using its internal algorithm.
          default: structured
        title:
          type: string
          description: The title of the document.
        description:
          type: string
          description: The description of the document.
        metadata:
          type: object
          description: The metadata for a document as an arbitrary JSON object. Properties of this object can be used by document level filter attributes.
        custom_dimensions:
          $ref: '#/components/schemas/CustomDimensions'
        sections:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/StructuredDocumentSection'
          description: The subsection of the document.
        chunking_strategy:
          $ref: '#/components/schemas/ChunkingStrategy'
      description: A document with layout features.
      x-vectaraParents:
        - CreateDocumentRequest
    StructuredDocumentSection:
      required:
        - text
      type: object
      properties:
        id:
          type: integer
          description: The section ID. This gets converted to a metadata field automatically.
          format: int32
        title:
          type: string
          description: The section title.
        text:
          type: string
          description: The text of the section.
        metadata:
          type: object
          description: Arbitrary object that becomes document part level metadata on any document part created by this section. Properties of this object can be used by document part level filters if defined as a corpus filter attribute.
        tables:
          type: array
          items:
            $ref: '#/components/schemas/Table'
          description: The tables that this section contains.
        sections:
          type: array
          items:
            $ref: '#/components/schemas/StructuredDocumentSection'
          description: The sections that this section contains.
      description: A logical section within a structured document.
    CoreDocument:
      required:
        - id
        - type
        - document_parts
      type: object
      properties:
        id:
          type: string
          description: The document ID must be unique within the corpus.
          example: my-doc-id
        type:
          type: string
          description: When the type of the indexed document is `core` the rest of the object is expected to follow this schema. This schema allows precise specification of document chunks that get directly translated to retrieve search results.
          default: core
        metadata:
          type: object
          description: Arbitrary object of document level metadata. Properties of this object can be used by document filters if defined as a corpus filter attribute.
          example:
            title: A Nice Document
            lang: eng
        tables:
          type: array
          items:
            $ref: '#/components/schemas/Table'
          description: The tables that this document contains.
        document_parts:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/CoreDocumentPart'
          description: Parts of the document that make up the document.
      description: The document structure that most closely corresponds to Vectara's internal document data model.
      x-vectaraParents:
        - CreateDocumentRequest
    DocumentPart:
      required:
        - text
      type: object
      properties:
        text:
          type: string
          description: The text of the document part.
          example: I'm a nice document part.
        metadata:
          type: object
          description: The metadata for a document part. These may be used in metadata filters at query time if filter attributes are configured on the corpus.
          example:
            nice_rank: 9000
        context:
          type: string
          description: The context text for the document part.
        custom_dimensions:
          $ref: '#/components/schemas/CustomDimensions'
      description: A part of a document. This section gets converted into an embedding and directly maps to a search result. Usually a sentence.
    CoreDocumentPart:
      required:
        - text
      type: object
      properties:
        text:
          type: string
          description: The text of the document part.
          example: I'm a nice document part.
        metadata:
          type: object
          description: The metadata for a document part. These may be used in metadata filters at query time if filter attributes are configured on the corpus.
          example:
            nice_rank: 9000
        table_id:
          type: string
          description: The ID of the table that this document part belongs to.
        context:
          type: string
          description: The context text for the document part.
        custom_dimensions:
          $ref: '#/components/schemas/CustomDimensions'
      description: A part of a document. This section gets converted into an embedding and directly maps to a search result. Usually this is a sentence.
    CustomDimensions:
      type: object
      additionalProperties:
        type: number
        format: double
      description: The custom dimensions as additional weights.
    Document:
      type: object
      properties:
        id:
          type: string
          description: The document ID.
          example: my-doc-id
        metadata:
          type: object
          description: The document metadata.
        tables:
          type: array
          items:
            $ref: '#/components/schemas/Table'
          description: The tables that this document contains. Tables are not available when table extraction is not enabled.
        parts:
          type: array
          items:
            $ref: '#/components/schemas/DocumentPart'
          description: 'Parts of the document that make up the document. However, parts are not available when retrieving a list of documents or when creating a document. This property is only available when retrieving a document by ID.'
        storage_usage:
          $ref: '#/components/schemas/DocumentStorageUsage'
        extraction_usage:
          $ref: '#/components/schemas/ExtractionUsage'
      description: 'A document stored in a corpus, containing metadata and indexed content.'
    Cell:
      type: object
      properties:
        text_value:
          type: string
          description: A text value.
        int_value:
          type: integer
          description: A signed 64-bit integer value.
          format: int64
        float_value:
          type: number
          description: A floating-point value with double precision.
          format: double
        bool_value:
          type: boolean
          description: A boolean value.
        colspan:
          type: integer
          description: 'The number of columns the cell spans. This field is optional; if not specified, default is 1. Must be greater than 0.'
          format: int32
        rowspan:
          type: integer
          description: 'The number of rows the cell spans. This field is optional; if not specified, default is 1. Must be greater than 0.'
          format: int32
      description: A cell in a table.
    Row:
      type: array
      items:
        $ref: '#/components/schemas/Cell'
      description: A row in a table.
    Header:
      type: array
      items:
        $ref: '#/components/schemas/Cell'
      description: The header of a table.
    Data:
      type: object
      properties:
        headers:
          type: array
          items:
            $ref: '#/components/schemas/Header'
          description: The headers of the table.
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Row'
          description: The rows in the data.
      description: The data of a table.
    Table:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the table within the document.
          example: table_1
        title:
          type: string
          description: The title of the table.
        data:
          $ref: '#/components/schemas/Data'
        description:
          type: string
          description: The description of the table.
      description: A table in a document.
    EvaluateFactualConsistencyRequest:
      required:
        - generated_text
        - source_texts
      type: object
      properties:
        model_parameters:
          type: object
          properties:
            model_name:
              type: string
              description: The name of the model to use for evaluation.
              default: hhem_v2.2
              example: hhem_v2.2
          description: The model parameters for the evaluation.
        generated_text:
          type: string
          description: 'The generated text (e.g., summary or answer) to evaluate for factual consistency.'
        source_texts:
          type: array
          items:
            type: string
          description: The source documents or text snippets against which to evaluate factual consistency.
      description: Request to evaluate the factual consistency of a generated text against source documents.
    EvaluateFactualConsistencyResponse:
      required:
        - score
      type: object
      properties:
        score:
          maximum: 1.0
          minimum: 0.0
          type: number
          description: 'A prediction score (0.0-1.0) from HHEM, monotonically indicates the likelihood of hallucinations.'
          format: double
      description: Results of the factual consistency evaluation.
    DocumentStorageUsage:
      type: object
      properties:
        bytes_used:
          minimum: 0
          type: integer
          description: 'Number of bytes used by document counting towards maximum corpus size, and towards any billing plans.'
          format: int64
        metadata_bytes_used:
          minimum: 0
          type: integer
          description: Number of metadata bytes used by a document.
          format: int64
      description: 'How much storage the document used. This information is currently not returned when retrieving the document, and only returned when indexing a document.'
    ExtractionUsage:
      type: object
      properties:
        table_extraction_used:
          minimum: 0
          type: integer
          description: The number of pages from the document that consumed the extraction quota.
          format: int64
      description: 'How much extraction quota the document used. This information is currently not returned when retrieving the document, and only returned when indexing a document.'
    ListDocumentsResponse:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
          description: List of documents.
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      description: Response containing a list of documents stored in a corpus.
    LLM:
      type: object
      properties:
        id:
          pattern: llm_.*
          type: string
          description: The ID of the LLM.
        name:
          type: string
          description: Name of the LLM.
        description:
          type: string
          description: The description of the LLM.
        enabled:
          type: boolean
          description: Indicates whether the LLM is enabled.
        default:
          type: boolean
          description: 'If this is the default LLM, it is used in queries when the generator is not specified.'
        prompts:
          items:
            $ref: '#/components/schemas/Prompt'
          description: List of prompts that the model can use. This is deprecated; see `/v2/generation_presets` instead.
          deprecated: true
      description: 'A LLM can be used to enhance query results with a response, and be used as the responder during a chat.'
    Prompt:
      type: object
      properties:
        id:
          pattern: pmt_.*
          type: string
          description: The ID of the prompt.
        name:
          type: string
          description: Name of the prompt. This is used as the `prompt_name` in a query.
        description:
          type: string
          description: The description of the prompt.
        enabled:
          type: boolean
          description: Indicates whether the prompt is enabled.
        default:
          type: boolean
          description: Indicates if this prompt is the default prompt used with the LLM.
      description: A prompt that can be used with a LLM. A prompt is the template that is used to render the text sent to the LLM. It also contains various default model settings such as temperature.
    CreateLLMRequest:
      required:
        - type
      type: object
      oneOf:
        - $ref: '#/components/schemas/CreateOpenAILLMRequest'
      description: Request to create a Large Language Model connection for generative capabilities.
      discriminator:
        propertyName: type
        mapping:
          openai-compatible: '#/components/schemas/CreateOpenAILLMRequest'
    CreateOpenAILLMRequest:
      required:
        - type
        - name
        - model
        - uri
      type: object
      properties:
        type:
          type: string
          description: 'Must be "openai-compatible" for OpenAI and OpenAI-compatible APIs (like Anthropic Claude, Azure OpenAI, etc)'
          default: openai-compatible
        name:
          type: string
          description: 'Name to reference the LLM.  This will be used in other endpoints (like query) when using this LLM. If this name conflicts with a global LLM (a LLM that is precofnigured with the Vectara platform), then it will override that LLM for all usages.'
        description:
          type: string
          description: Description of the LLM.
          default: ''
        model:
          type: string
          description: 'The model name to use with the API (e.g. gpt-4, claude-2, etc). This is used in the API request to the remote LLM provider.'
        uri:
          type: string
          description: The URI endpoint for the API (can be OpenAI or any compatible API endpoint)
          format: uri
        auth:
          $ref: '#/components/schemas/RemoteAuth'
        headers:
          type: object
          additionalProperties:
            type: string
          description: Additional HTTP headers to include with requests to the LLM API.
        test_model_parameters:
          type: object
          description: Any additional parameters that are required for the LLM during the test call.
      description: Request to create an OpenAI-compatible Large Language Model connection.
      x-vectaraParents:
        - CreateLLMRequest
    ListLLMsResponse:
      type: object
      properties:
        llms:
          type: array
          items:
            $ref: '#/components/schemas/LLM'
          description: List of LLMs.
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      description: Response containing a list of Large Language Models available for generative AI capabilities.
    GenerationPreset:
      type: object
      properties:
        name:
          type: string
          description: Name of the generation preset to be used with configuring generation.
        description:
          type: string
          description: Description of the generation preset.
        llm_name:
          type: string
          description: Name of the model that these presets are used with. The list of available names can be fetched by the `GET /v2/llms` endpoint.
        prompt_template:
          type: string
          description: Preset template used to render the prompt sent to generation.
        max_used_search_results:
          minimum: 1
          type: integer
          description: Preset maximum number of search results that will be available to the prompt.
          format: int32
        max_tokens:
          minimum: 1
          type: integer
          description: Preset maximum number of tokens to be returned by the generation.
          format: int32
        temperature:
          type: number
          description: 'The sampling temperature to use. Higher values make the output more random, while lower values make it more focused and deterministic.'
          format: float
        frequency_penalty:
          type: number
          description: 'Higher values penalize new tokens based on their existing frequency in the generation so far, decreasing the model''s likelihood to repeat the same line verbatim.'
          format: float
        presence_penalty:
          type: number
          description: 'Higher values penalize new tokens based on whether they appear in the generation so far, increasing the model''s likelihood to talk about new topics.'
          format: float
        enabled:
          type: boolean
          description: Indicates whether the prompt is enabled.
        default:
          type: boolean
          description: Indicates if this prompt is the default prompt used with the LLM.
      description: Bundle of default values used when calling generation. All values except model name can be overridden at generation time.
    ListGenerationPresetsResponse:
      type: object
      properties:
        generation_presets:
          type: array
          items:
            $ref: '#/components/schemas/GenerationPreset'
          description: List of generation presets.
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      description: Response containing a list of generation presets for configuring RAG behavior.
    ChatRequest:
      required:
        - query
        - search
      type: object
      properties:
        query:
          type: string
          description: The chat message or question.
          example: How can I use the Vectara platform?
        search:
          $ref: '#/components/schemas/SearchCorporaParameters'
        generation:
          $ref: '#/components/schemas/GenerationParameters'
        chat:
          $ref: '#/components/schemas/ChatParameters'
        save_history:
          type: boolean
          description: Indicates whether to save the chat in both the chat and query history. This overrides `chat.store`.
          default: true
        intelligent_query_rewriting:
          type: boolean
          description: '[Tech Preview] Indicates whether to enable intelligent query rewriting. When enabled, the platform will attempt to extract metadata filter and rewrite the query to improve search results. Read [here](https://docs.vectara.com/docs/search-and-retrieval/intelligent-query-rewriting) for more details.'
          default: false
        stream_response:
          type: boolean
          description: Indicates whether the response should be streamed or not.
          default: false
      description: Request to start or continue a chat conversation with a large language model.
    ChatParameters:
      type: object
      properties:
        store:
          type: boolean
          description: Indicates whether to store chat messages and response messages.
          default: true
      description: Parameters to control chat behavior.
    ChatFullResponse:
      type: object
      properties:
        chat_id:
          type: string
          description: 'If the chat response was stored, the ID of the chat.'
        turn_id:
          type: string
          description: 'If the chat response was stored, the ID of the turn.'
        answer:
          type: string
          description: The message from the chat model for the chat message.
        response_language:
          $ref: '#/components/schemas/Language'
        search_results:
          type: array
          items:
            $ref: '#/components/schemas/IndividualSearchResult'
          description: The ranked search results that the chat model used.
        factual_consistency_score:
          type: number
          description: Indicates the probability that the summary is factually consistent with the results. The system excludes this property if it encounters excessively large outputs or search results.
          format: float
        rendered_prompt:
          type: string
          description: The rendered prompt sent to the LLM. Useful when creating customer `prompt_template` templates.
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/QueryWarning'
          description: Non-fatal warnings that occurred during request processing
        rephrased_query:
          type: string
          description: View the actual query made to backend that was rephrased by the LLM from the input query.
        rewritten_queries:
          type: array
          items:
            $ref: '#/components/schemas/RewrittenQuery'
          description: The rewritten queries for the corpora that were searched. Only populated when intelligent_query_rewriting is enabled.
      description: Full response to a chat question when the result is not streamed.
    ChatStreamedResponse:
      type: object
      oneOf:
        - $ref: '#/components/schemas/StreamSearchResponse'
        - $ref: '#/components/schemas/ChatInfoResponse'
        - $ref: '#/components/schemas/StreamGenerationChunk'
        - $ref: '#/components/schemas/StreamGenerationEnd'
        - $ref: '#/components/schemas/FactualConsistencyScore'
        - $ref: '#/components/schemas/StreamResponseEnd'
        - $ref: '#/components/schemas/GenerationInfo'
        - $ref: '#/components/schemas/StreamError'
      description: An individual event when the response is streamed.
      discriminator:
        propertyName: type
        mapping:
          search_results: '#/components/schemas/StreamSearchResponse'
          chat_info: '#/components/schemas/ChatInfoResponse'
          generation_chunk: '#/components/schemas/StreamGenerationChunk'
          generation_end: '#/components/schemas/StreamGenerationEnd'
          generation_info: '#/components/schemas/GenerationInfo'
          factual_consistency_score: '#/components/schemas/FactualConsistencyScore'
          end: '#/components/schemas/StreamResponseEnd'
          error: '#/components/schemas/StreamError'
    ChatInfoResponse:
      type: object
      properties:
        type:
          type: string
          description: This will be `chat_info` when the stream event contains information about how the chat is stored.
          default: chat_info
        chat_id:
          pattern: cht_.+$
          type: string
          description: ID of the chat.
        turn_id:
          pattern: trn_.+$
          type: string
          description: ID of the turn.
      description: Information about the chat.
      x-vectaraParents:
        - ChatStreamedResponse
    Chat:
      type: object
      properties:
        id:
          pattern: cht_.+$
          type: string
          description: ID of the chat.
        first_query:
          type: string
          description: The first query of the chat.
        first_answer:
          type: string
          description: The first answer of the chat.
        enabled:
          type: boolean
          description: Indicates whether this chat is enabled and can have further turns.
          example: true
        created_at:
          type: string
          description: Specifies when this chat was created.
          format: date-time
      description: A chat conversation with associated metadata and settings.
    ListChatsResponse:
      type: object
      properties:
        chats:
          type: array
          items:
            $ref: '#/components/schemas/Chat'
          description: List of chats.
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      description: Response containing a list of chat conversations.
    Turn:
      type: object
      properties:
        id:
          pattern: trn_.+$
          type: string
          description: The ID of the turn.
        chat_id:
          pattern: cht_.+$
          type: string
          description: The ID of the chat the turn resides in.
        query:
          type: string
          description: The query made to produce this turn.
          example: How do you turn this widget?
        answer:
          type: string
          description: The response to the query.
          example: The widget turns counter clockwise.
        enabled:
          type: boolean
          description: Indicates whether the turn is enabled and shown in future turns of the chat.
          example: true
        created_at:
          type: string
          description: Specifies when the turn was created.
          format: date-time
      description: 'A single message exchange in a chat conversation, representing one user input and the corresponding response.'
    ListChatTurnsResponse:
      type: object
      properties:
        turns:
          type: array
          items:
            $ref: '#/components/schemas/Turn'
          description: List of turns.
      description: Response containing a list of turns (message exchanges) within a chat conversation.
    UpdateTurnRequest:
      type: object
      properties:
        enabled:
          type: boolean
          description: Indicates whether to disable a turn. It will disable this turn and all subsequent turns. Enabling a turn is not implemented.
          example: false
      description: Request to update a specific turn (message exchange) within a chat conversation.
    ListEncodersResponse:
      type: object
      properties:
        encoders:
          type: array
          items:
            $ref: '#/components/schemas/Encoder'
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      description: Response containing a list of available encoders for converting text to vector embeddings.
    CreateApiKeyRequest:
      required:
        - name
        - api_key_role
      type: object
      properties:
        name:
          type: string
          description: The human-readable name of the API key.
        api_key_role:
          $ref: '#/components/schemas/ApiKeyRole'
        corpus_keys:
          type: array
          items:
            $ref: '#/components/schemas/CorpusKey'
          description: Corpora this API key has roles on if it is not a Personal API key. This property should be null or missing if this `api_key_role` is `personal`.
      description: Request to create a new API key for authenticating with the platform.
    ApiKey:
      type: object
      properties:
        id:
          pattern: aky_.*
          type: string
          description: The ID of the API key.
        name:
          type: string
          description: The human-readable name of the API key.
        secret_key:
          type: string
          description: The key used in API requests. The key should be kept secure.
        enabled:
          type: boolean
          description: If this API key is enabled.
        api_key_role:
          $ref: '#/components/schemas/ApiKeyRole'
        api_policy:
          $ref: '#/components/schemas/ApiPolicy'
      description: An API key used to authenticate and authorize requests to the Vectara platform.
    ApiKeyRole:
      enum:
        - serving
        - serving_and_indexing
        - personal
      type: string
      description: "Role of the API key. A serving API key can only perform query type requests on its corpora. A serving and indexing key can perform both indexing and query type requests on its corpora.\nA personal API key has all the same permissions as the creator of the API key."
    UpdateApiKeyRequest:
      type: object
      properties:
        enabled:
          type: boolean
          description: Indicates whether to disable or enable an API key.
      description: Request to update an existing API key's properties or permissions.
    ListApiKeysResponse:
      type: object
      properties:
        api_keys:
          type: array
          items:
            $ref: '#/components/schemas/ApiKey'
          description: List of API keys.
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      description: Response containing a list of API keys for the authenticated customer.
    CreateAppClientRequest:
      required:
        - type
      type: object
      oneOf:
        - $ref: '#/components/schemas/CreateClientCredentialsRequest'
      description: Request to create a new OAuth application client for the platform.
      discriminator:
        propertyName: type
        mapping:
          client_credentials: '#/components/schemas/CreateClientCredentialsRequest'
    CreateClientCredentialsRequest:
      required:
        - name
        - type
      type: object
      properties:
        name:
          type: string
          description: Name of the client credentials.
        description:
          type: string
          description: Description of the client credentials.
        type:
          type: string
          description: This will always be the value `client_credentials`.
          default: client_credentials
        api_roles:
          type: array
          items:
            $ref: '#/components/schemas/ApiRole'
          description: API roles that the client credentials will have.
      description: Create an App Client which allows you to call Vectara APIs using OAuth 2.0 client credentials.
      x-vectaraParents:
        - CreateAppClientRequest
    AppClient:
      type: object
      properties:
        id:
          pattern: app_.+$
          type: string
          description: 'The Vectara App Client ID. This ID is not used during an OAuth flow.  However, the ID used within the Vectara API.'
        name:
          type: string
          description: The human-readable name of the App Client.
        description:
          type: string
          description: Description of the App Client.
        client_id:
          type: string
          description: The client ID used with the OAuth flow.
        client_secret:
          type: string
          description: The client secret used in API requests.  The secret should be kept secure.
        api_roles:
          type: array
          items:
            $ref: '#/components/schemas/ApiRole'
          description: The API roles attached to the App Client.
        api_policy:
          $ref: '#/components/schemas/ApiPolicy'
      description: An OAuth application client configuration used for authentication.
    UpdateAppClientRequest:
      type: object
      properties:
        description:
          type: string
          description: The new App Client description.
        api_roles:
          type: array
          items:
            $ref: '#/components/schemas/ApiRole'
          description: The new roles attached to the App Client. These roles will replace the current roles.
      description: Request to update an existing OAuth application client's properties.
    ListAppClientsResponse:
      type: object
      properties:
        app_clients:
          type: array
          items:
            $ref: '#/components/schemas/AppClient'
          description: List of App Clients.
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      description: Response containing a list of OAuth application clients.
    CreateEncoderRequest:
      required:
        - type
      type: object
      oneOf:
        - $ref: '#/components/schemas/CreateOpenAIEncoderRequest'
      description: Request to create a new encoder
      discriminator:
        propertyName: type
        mapping:
          openai-compatible: '#/components/schemas/CreateOpenAIEncoderRequest'
    CreateOpenAIEncoderRequest:
      required:
        - name
        - description
        - uri
        - model
      type: object
      properties:
        type:
          type: string
          description: Must be "openai-compatible" for OpenAI and OpenAI-compatible APIs
          default: openai-compatible
        name:
          type: string
          description: A unique name for the encoder
          example: openai-text-encoder
        description:
          type: string
          description: A description of what this encoder does
          example: description
        output_dimensions:
          minimum: 1
          type: integer
          description: 'The number of dimensions in the output embedding vector. If provided and the model supports truncation, the response will be truncated to this number of dimensions.'
          format: int32
        uri:
          type: string
          description: The URI endpoint for the embedding API (can be OpenAI or any compatible embedding API endpoint)
          format: uri
          example: https://api.openai.com/v1/embeddings
        model:
          type: string
          description: The model name to use for embeddings
          example: text-embedding-ada-002
        auth:
          $ref: '#/components/schemas/RemoteAuth'
      description: Configuration for an OpenAI-compatible encoder
      x-vectaraParents:
        - CreateEncoderRequest
    Encoder:
      type: object
      properties:
        id:
          pattern: 'enc_[0-9]+$'
          type: string
          description: The Encoder ID.
          example: enc_1
        name:
          type: string
          description: 'The encoder name, `boomerang-2023-q3`.'
          example: openai-text-encoder
        type:
          type: string
          description: The encoder type
          default: vectara
          example: openai-compatible
        output_dimensions:
          type: integer
          description: 'When this encoder is used to create an embedding, it shows the count of dimensions for the output embedding. A high dimensionality will consume more storage space, but it allows for an increase in the quality of the embedding.'
          format: int32
          example: 1536
        description:
          type: string
          description: The encoder description.
        default:
          type: boolean
          description: Indicates whether the default encoder is used when creating a corpus.
          example: true
        enabled:
          type: boolean
          description: Indicates whether the encoder is enabled.
          example: true
      description: A model that converts text into vector embeddings for semantic search.
    Reranker:
      type: object
      properties:
        id:
          pattern: 'rnk_[0-9]+$'
          type: string
          description: The ID of the reranker.
        name:
          type: string
          description: The name of the reranker.
        description:
          type: string
          description: The description of the reranker.
        enabled:
          type: boolean
          description: Whether the reranker is enabled.
      description: A reranker can be used in query or chat endpoints to reorder the search results.
    ListRerankersResponse:
      type: object
      properties:
        rerankers:
          type: array
          items:
            $ref: '#/components/schemas/Reranker'
          description: An array of rerankers.
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      description: Response containing a list of available rerankers for improving search result ordering.
    TableExtractorSpec:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the table extractor to use.
          example: textract
      description: 'Specification for which table extractor to use. If not specified, the platform uses the default extractor.'
    TableGenerationSpec:
      type: object
      properties:
        llm_name:
          type: string
          description: The name of the LLM to use.
          example: gpt-4o
        prompt_template:
          type: string
          description: 'The prompt template to use when generating the table summary. Vectara manages both system and user roles and prompts for the generative LLM out of the box by default. However, users can override the `prompt_template` via this variable. The `prompt_template` is in the form of an Apache Velocity template. For more details on how to configure the `prompt_template`, see the [long-form documentation](https://docs.vectara.com/docs/prompts/vectara-prompt-engine).'
        model_parameters:
          type: object
          description: Optional parameters for the specified model used when generating the table summary.
          example:
            temperature: 0
            max_tokens: 512
      description: 'Specification for which generation to use during table summarization. If not specified, the platform uses the default summarizer. All parameters are optional and overrides the default values.'
    TableExtractor:
      type: object
      properties:
        name:
          type: string
          description: The name of the table extractor.
          example: textract
        is_default:
          type: boolean
          description: Indicates whether it is the default extractor when not specified during indexing.
        description:
          type: string
          description: The description of the table extractor.
          example: Uses the AWS Textract service to extract tables.
        generation:
          $ref: '#/components/schemas/TableGenerationSpec'
      description: A table extractor can be used to extract tabular data from documents during indexing.
    ListTableExtractorsResponse:
      type: object
      properties:
        table_extractors:
          type: array
          items:
            $ref: '#/components/schemas/TableExtractor'
          description: An array of table extractors.
      description: Response containing a list of available table extractors for document processing
    HallucinationCorrector:
      type: object
      properties:
        id:
          pattern: 'hcm_[0-9]+$'
          type: string
          description: The unique ID for the Hallucination Corrector (HC).
          example: hcm_123
        name:
          type: string
          description: 'The hallucination corrector name, typically including the base name and variant.'
          example: qwen2.5-7b-instruct-hcm
        type:
          type: string
          description: The hallucination corrector type. Defaults to `vectara`.
          default: vectara
        description:
          type: string
          description: A short description of the hallucination corrector’s purpose.
          example: Qwen/Qwen2.5-7B-Instruct for hallucination correction in AI-generated text.
        enabled:
          type: boolean
          description: Indicates whether the hallucination corrector is enabled and available for use in hallucination correction workflows.
          example: true
      description: A hallucination corrector that detects and corrects hallucinations in generated text.
    ListHallucinationCorrectorsResponse:
      type: object
      properties:
        hallucination_correctors:
          type: array
          items:
            $ref: '#/components/schemas/HallucinationCorrector'
          description: An array of hallucination correctors that match the request parameters.
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      description: Response containing a list of hallucination correctors.
    Job:
      type: object
      properties:
        id:
          pattern: job_.+$
          type: string
          description: The ID of the job.
        type:
          enum:
            - rebuild_vector_index
            - replace_filter_attributes
            - unknown
          type: string
          description: The type of job.
        corpus_keys:
          type: array
          items:
            $ref: '#/components/schemas/CorpusKey'
          description: The corpora that this job belongs to. It may not belong to any corpora.
        state:
          $ref: '#/components/schemas/JobState'
        created_at:
          type: string
          description: Specifies when the job was created.
          format: date-time
        started_at:
          type: string
          description: Specifies when the job was started.
          format: date-time
        completed_at:
          type: string
          description: Specifies when the job was completed.
          format: date-time
        created_by_username:
          type: string
          description: 'The username of the user who created the job. This property may be missing, e.g., if the job was created by the system, not a user.'
      description: A background job for processing long-running operations on the platform.
    JobState:
      enum:
        - unknown
        - queued
        - started
        - completed
        - failed
        - failed_will_retry
        - aborted
      type: string
      description: Enum representing the possible states of a background job.
    ListJobsResponse:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
          description: An array of jobs.
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      description: Response containing a list of background jobs and their current states.
    CreateUserRequest:
      required:
        - email
      type: object
      properties:
        email:
          type: string
          description: The email address for the user.
          format: email
        username:
          type: string
          description: The username for the user. The value defaults to the email.
        description:
          type: string
          description: The description of the user.
        api_roles:
          type: array
          items:
            $ref: '#/components/schemas/ApiRole'
          description: The role names assigned to the user.
      description: Request to create a new user account in the system.
    UpdateUserRequest:
      type: object
      properties:
        enabled:
          type: boolean
          description: Indicates whether to enable or disable the user.
        api_roles:
          type: array
          items:
            $ref: '#/components/schemas/ApiRole'
          description: The new role names of the user.
      description: Request to update an existing user's properties or permissions.
    User:
      type: object
      properties:
        id:
          pattern: usr_.+
          type: string
          description: The Vectara ID for the user.
        email:
          type: string
          description: The email address for the user.
          format: email
        username:
          type: string
          description: The username for the user.
        enabled:
          type: boolean
          description: Indicates whether the user is enabled or disabled.
        description:
          type: string
          description: The description of the user.
        created_at:
          type: string
          description: When the user was created.
          format: date-time
        updated_at:
          type: string
          description: When a user property was last updated.
          format: date-time
        api_roles:
          type: array
          items:
            $ref: '#/components/schemas/ApiRole'
          description: The role names of the user.
        api_policy:
          $ref: '#/components/schemas/ApiPolicy'
      description: A user account with associated profile information and permissions.
    ListUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: List of users.
        metadata:
          $ref: '#/components/schemas/ListMetadata'
      description: Response containing a list of user accounts.
    ApiRole:
      enum:
        - owner
        - administrator
        - billing_administrator
        - corpus_administrator
      type: string
      description: Roles that a user or an app client can take on.
    ApiPolicy:
      required:
        - name
        - allowed_operations
      type: object
      properties:
        name:
          type: string
          description: The name of the API role.
        allowed_operations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ApiOperationPolicy'
          description: 'Operations that are allowed by the API role. Each operation may only allow certain resources that are described by a resource path to resource value map. If the value is null, then the operation is allowed on any resource.'
      description: What actions a principal can take on the Vectara platform.
    ApiOperationPolicy:
      required:
        - allow_any_resource
      type: object
      properties:
        allow_any_resource:
          type: boolean
          description: If any resource is allowed for the operation.
          default: true
        allowed_resources:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: 'Object with keys of resource paths to a list of allowed resources. A resource path starts with either body, path, or implicit. A body or path resource is within the operation body, and an implicit resource is a resource implied by the request.'
      description: Policy to allow operations if only using the specified resource.
    Language:
      enum:
        - auto
        - eng
        - deu
        - fra
        - zho
        - kor
        - ara
        - rus
        - tha
        - nld
        - ita
        - por
        - spa
        - jpn
        - pol
        - tur
        - vie
        - ind
        - ces
        - ukr
        - ell
        - heb
        - fas
        - hin
        - urd
        - swe
        - ben
        - msa
        - ron
      type: string
      description: Languages that the Vectara platform supports.
      default: auto
    QueryHistorySummary:
      type: object
      properties:
        id:
          type: string
          description: The ID of the query history.
        query:
          type: string
          description: The actual query made.
        corpus_key:
          type: string
          description: The corpus key that the query was made on.
        started_at:
          type: string
          description: ISO date time indicating when the query was first received.
          format: date-time
        latency_millis:
          type: integer
          description: Time that the query took in milliseconds.
        chat_id:
          type: string
          description: 'The unique ID of the chat associated with the query, if this query is part of a chat.'
        generation:
          type: string
          description: 'Generated response to the query, if requested.'
        factual_consistency_score:
          type: number
          description: The factual consistency score of the generation.
          format: float
      description: 'A summary of a previously executed query, including metadata but not full results.'
    QueryHistory:
      type: object
      properties:
        id:
          type: string
          description: The ID of the query history.
        query:
          $ref: '#/components/schemas/QueryRequest'
        chat_id:
          type: string
          description: The ID of the chat the query is a part of.
        latency_millis:
          type: integer
          description: 'Time taken to complete the query, measured in milliseconds.'
        started_at:
          type: string
          description: ISO date time indicating when the query was first received.
          format: date-time
        spans:
          type: array
          items:
            $ref: '#/components/schemas/QueryHistorySpan'
          description: Parts of the query pipeline. Each span explains what happened during that stage of the query pipeline.
      description: 'A complete record of a previously executed query, including the request parameters and response.'
    QueryHistorySpan:
      type: object
      oneOf:
        - $ref: '#/components/schemas/RephraseSpan'
        - $ref: '#/components/schemas/SearchSpan'
        - $ref: '#/components/schemas/RerankSpan'
        - $ref: '#/components/schemas/GenerationSpan'
        - $ref: '#/components/schemas/FactualConsistencyScoreSpan'
        - $ref: '#/components/schemas/RewrittenQuerySpan'
      description: Portion of the query history.
      discriminator:
        propertyName: type
        mapping:
          rephrase: '#/components/schemas/RephraseSpan'
          search: '#/components/schemas/SearchSpan'
          rerank: '#/components/schemas/RerankSpan'
          generation: '#/components/schemas/GenerationSpan'
          fcs: '#/components/schemas/FactualConsistencyScoreSpan'
          rewritten_query: '#/components/schemas/RewrittenQuerySpan'
    RephraseSpan:
      type: object
      properties:
        type:
          type: string
          description: This value is always `rephrase`.
        latency_millis:
          type: integer
          description: Time taken in milliseconds.
        started_at:
          type: string
          description: When the span started.
          format: date-time
        rephrased_query:
          type: string
          description: Query made to the corpora.
      description: 'During the query pipeline, the query may be rephrased to better suit the corpus.'
      x-vectaraParents:
        - QueryHistorySpan
    SearchSpan:
      type: object
      properties:
        type:
          type: string
          description: This value is always `search`.
        latency_millis:
          type: integer
          description: Time taken in milliseconds.
        started_at:
          type: string
          description: Indicates when the span started.
          format: date-time
        search_results:
          type: array
          items:
            $ref: '#/components/schemas/IndividualSearchResult'
          description: The search results before reranking.
      description: The search portion of the query pipeline. This occurs before any reranking span.
      x-vectaraParents:
        - QueryHistorySpan
    RerankSpan:
      type: object
      properties:
        type:
          type: string
          description: This value is always `rerank`.
        latency_millis:
          type: integer
          description: Time taken in milliseconds.
        started_at:
          type: string
          description: When the span started.
          format: date-time
        reranked_search_results:
          type: array
          items:
            $ref: '#/components/schemas/RerankedSearchResult'
          description: The new search results after reranking.
      description: The reranking of the search result.
      x-vectaraParents:
        - QueryHistorySpan
    GenerationSpan:
      type: object
      properties:
        type:
          type: string
          description: This value is always `generation`.
        latency_millis:
          type: integer
          description: Time taken in milliseconds.
        started_at:
          type: string
          description: When the span started.
          format: date-time
        prompt:
          type: string
          description: The text sent as a prompt to the LLM.
        generation:
          type: string
          description: The text generated from the LLM.
      description: The generation by an LLM.
      x-vectaraParents:
        - QueryHistorySpan
    FactualConsistencyScoreSpan:
      type: object
      properties:
        type:
          type: string
          description: This value is always `fcs`.
        latency_millis:
          type: integer
          description: Time taken in milliseconds.
        started_at:
          type: string
          description: When the span started.
          format: date-time
        score:
          type: number
          description: The probability that the summary is factually consistent with the results.
          format: float
      description: The factual consistency of the generation.
      x-vectaraParents:
        - QueryHistorySpan
    RewrittenQuerySpan:
      type: object
      properties:
        type:
          type: string
          description: Indicates the type of span. This value is always `rewritten_query`.
        corpus_key:
          type: string
          description: The corpus key that the query was made on.
        latency_millis:
          type: integer
          description: Time taken in milliseconds.
        started_at:
          type: string
          description: When the span started.
          format: date-time
        warnings:
          items:
            $ref: '#/components/schemas/RewrittenQueryWarning'
          description: Warnings that occurred during query rewriting.
        filter_extraction:
          $ref: '#/components/schemas/FilterExtraction'
      description: Provides detailed information about a rewritten query generated for a specific corpus when intelligent query rewriting is enabled.
      x-vectaraParents:
        - QueryHistorySpan
    RewrittenQueryWarning:
      enum:
        - no_filter_attrs
        - extracted_empty_filter
        - failed_to_parse_extracted_filter
        - failure
      type: string
      description: "The warning for the rewritten query.\n *  `no_filter_attrs`: Corpus has no filter attributes.\n *  `extracted_empty_filter`: No filter found in the query to extract or the platform failed to extract it.\n *  `failed_to_parse_extracted_filter`: Failed to parse the extracted filter due to invalid syntax.\n *  `failure`: Unexpected error occurred."
    ListQueryHistoriesResponse:
      type: object
      properties:
        queries:
          type: array
          items:
            $ref: '#/components/schemas/QueryHistorySummary'
        metadata:
          type: object
          properties:
            page_key:
              type: string
              description: A query parameter required when requesting the next page of results.
          description: The metadata for the list of query histories.
      description: An array of query histories.
    QueryWarning:
      enum:
        - exceeded_max_input_length_fcs
        - intelligent_query_rewriting_failed
      type: string
      description: "Non-fatal warnings that occurred during query processing.\n *  `exceeded_max_input_length_fcs`: The input to the Factual Consistency Score model exceeded the maximum allowed length, so no score is being returned\n *  `intelligent_query_rewriting_failed`: Intelligent query rewriting failed due to an internal error"
    ComputeCorpusSizeResponse:
      type: object
      properties:
        used_docs:
          type: integer
          description: Number of documents in the corpus
          format: int64
        used_parts:
          type: integer
          description: Number of document parts in the corpus
          format: int64
        used_characters:
          type: integer
          description: Total number of characters in the corpus
          format: int64
        used_metadata_characters:
          type: integer
          description: Number of metadata characters in the corpus
          format: int64
      description: Response containing the computed size of a corpus
    RemoteAuth:
      required:
        - type
      type: object
      oneOf:
        - $ref: '#/components/schemas/BearerAuth'
        - $ref: '#/components/schemas/HeaderAuth'
      description: Authentication configuration for an LLM
      discriminator:
        propertyName: type
        mapping:
          bearer: '#/components/schemas/BearerAuth'
          header: '#/components/schemas/HeaderAuth'
    BearerAuth:
      required:
        - type
        - token
      type: object
      properties:
        type:
          type: string
          description: Must be "bearer" for bearer token auth
          default: bearer
        token:
          type: string
          description: The bearer token to use for authentication
      description: Bearer token authentication
      x-vectaraParents:
        - RemoteAuth
    HeaderAuth:
      required:
        - type
        - header
        - value
      type: object
      properties:
        type:
          type: string
          description: Must be "header" for header-based auth
          default: header
        header:
          type: string
          description: The header name to use (e.g. x-api-key)
        value:
          type: string
          description: The header value to use
      description: Custom header-based authentication
      x-vectaraParents:
        - RemoteAuth
    ListMetadata:
      type: object
      properties:
        page_key:
          type: string
          description: 'When requesting the next page of this list, this is needed as a query parameter.'
      description: The standard metadata in the response of a list operation.
    FilterExtraction:
      type: object
      properties:
        query:
          type: string
          description: The query rephrased from the input query and executed.
        metadata_filter:
          type: string
          description: The metadata filter extracted from the input query.
      description: The result of query filter extraction.
    SummarizeDocumentRequest:
      required:
        - llm_name
      type: object
      properties:
        llm_name:
          type: string
          description: The name of the LLM.
        prompt_template:
          type: string
          description: 'The prompt template to use when generating the summary. Vectara manages both system and user roles and prompts for the generative LLM out of the box by default. However, users can override the `prompt_template` via this variable. The `prompt_template` is in the form of an Apache Velocity template. For more details on how to configure the `prompt_template`, see the [long-form documentation](https://docs.vectara.com/docs/prompts/vectara-prompt-engine).'
        model_parameters:
          type: object
          description: Optional parameters for the specified model used when generating the summary.
        stream_response:
          type: boolean
          description: Indicates whether the response should be streamed or not.
          default: false
      description: Request to summarize a document
    SummarizeDocumentResponse:
      type: object
      properties:
        summary:
          type: string
          description: The summary of the document
        rendered_prompt:
          type: string
          description: The rendered prompt sent to the LLM. Useful when `prompt_template` is sent in the request.
      description: Response containing the summary of a document
    SummarizeDocumentStreamedResponse:
      type: object
      oneOf:
        - $ref: '#/components/schemas/StreamGenerationChunk'
        - $ref: '#/components/schemas/GenerationInfo'
        - $ref: '#/components/schemas/StreamGenerationEnd'
        - $ref: '#/components/schemas/StreamResponseEnd'
        - $ref: '#/components/schemas/StreamError'
      description: An individual event sent with Server-sent Events (SSE) when the document summarization request is streamed.
      discriminator:
        propertyName: type
        mapping:
          generation_chunk: '#/components/schemas/StreamGenerationChunk'
          generation_info: '#/components/schemas/GenerationInfo'
          generation_end: '#/components/schemas/StreamGenerationEnd'
          error: '#/components/schemas/StreamError'
          end: '#/components/schemas/StreamResponseEnd'
    HallucinationCorrectionRequest:
      required:
        - generated_text
        - documents
        - model
      type: object
      properties:
        generated_text:
          type: string
          description: The generated text to be evaluated. The hallucination corrector reviews this text and applies corrections based on the provided source documents.
        documents:
          type: array
          items:
            $ref: '#/components/schemas/HcmSourceDocument'
          description: The source documents that were used to generate the text.
        model:
          type: string
          description: The name of the LLM model to use for hallucination correction.
      description: The request to detect and correct hallucinations in generated text.
    HcmSourceDocument:
      required:
        - text
      type: object
      properties:
        text:
          type: string
          description: The full text content of the source document. Hallucination correction uses this content as the factual basis for correcting the generated text.
      description: An array of source documents used to verify the factual accuracy of the generated text. Each document should reflect the context used to generate the original text.
    HallucinationCorrectionResponse:
      required:
        - corrected_text
        - corrections
      type: object
      properties:
        corrections:
          type: array
          items:
            $ref: '#/components/schemas/CorrectionItem'
          description: 'A list of corrections applied to the text, with explanations.'
        corrected_text:
          type: string
          description: 'The revised version of the text, with minimal edits made to correct unsupported or inaccurate statements. If no corrections are needed, this value is identical to the original text.'
        model:
          type: string
          description: The name of the model used for hallucination correction.
      description: The response that contains the hallucination correction results.
    CorrectionItem:
      required:
        - original_text
        - corrected_text
        - explanation
      type: object
      properties:
        original_text:
          type: string
          description: The original text containing a hallucination or error.
        corrected_text:
          type: string
          description: The corrected version of the text.
        explanation:
          type: string
          description: An explanation of why the correction was needed for the text.
      description: A single correction applied to a span of text in the generated text.
    NotFoundError:
      type: object
      properties:
        id:
          type: string
          description: The ID cannot be found.
        messages:
          type: array
          items:
            title: message
            type: string
        request_id:
          type: string
          description: The ID of the request that can be used to help Vectara support debug what went wrong.
      description: Error returned when a requested resource does not exist.
    BadRequestError:
      type: object
      properties:
        field_errors:
          type: object
          additionalProperties:
            type: string
          description: The errors that relate to specific fields in the request.
        messages:
          type: array
          items:
            title: message
            type: string
        request_id:
          type: string
          description: The ID of the request that can be used to help Vectara support debug what went wrong.
      description: Error returned when a request contains invalid parameters or violates schema validation.
    Error:
      type: object
      properties:
        messages:
          type: array
          items:
            title: message
            type: string
            example: Internal server error.
          description: The messages describing why the error occurred.
        request_id:
          type: string
          description: The ID of the request that can be used to help Vectara support debug what went wrong.
      description: A general error response with an error code and message.
    CreateChatCompletionRequest:
      required:
        - messages
        - model
      type: object
      properties:
        model:
          type: string
          description: The ID of the model to use. This field is required.
        messages:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionRequestMessage'
          description: An ordered array of messages that represent the full context of the conversation to date. Each message includes a `role` and `content`.
        stream:
          type: boolean
          description: 'Optional. When set to `true`, the API streams partial message deltas as they become available, similar to ChatGPT''s streaming mode.'
          default: false
      description: The request object for creating a chat completion with an OpenAI-compatible interface. This object is compatible with OpenAI's chat completion schema and supports customizable parameters for response generation.
    ChatCompletionRequestMessage:
      required:
        - role
        - content
      type: object
      properties:
        role:
          type: string
          description: 'The role of the author of this message. Common values include ''system'', ''user'', ''assistant'', ''function'', and ''tool''.'
        content:
          type: string
          description: The contents of the message.
        name:
          type: string
          description: 'The name of the author of this message, used to connect messages in a conversation.'
      description: 'A message in the chat completion request, representing part of the conversation.'
    CreateChatCompletionResponse:
      required:
        - object
        - choices
      type: object
      properties:
        object:
          enum:
            - chat.completion
          type: string
          description: 'The object type, which is always ''chat.completion''.'
        choices:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionResponseChoice'
          description: A list of chat completion choices. Can be more than one if `n` is greater than `1`.
      description: Response object containing the generated chat completion.
    ChatCompletionResponseChoice:
      required:
        - index
        - message
      type: object
      properties:
        index:
          type: integer
          description: The index of the choice in the array of choices.
        message:
          $ref: '#/components/schemas/ChatCompletionResponseMessage'
      description: A single chat completion choice returned in the response
    ChatCompletionResponseMessage:
      required:
        - role
      type: object
      properties:
        role:
          type: string
          description: 'The role of the author of this message, typically ''assistant'' for responses.'
      description: A message in the chat completion response from the assistant.
    CreateChatCompletionStreamResponse:
      required:
        - object
        - choices
      type: object
      properties:
        object:
          enum:
            - chat.completion.chunk
          type: string
          description: 'The object type, which is always ''chat.completion.chunk'' for streaming responses.'
        choices:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionStreamResponseChoice'
          description: A list of chat completion chunks.
      description: The response object for streaming chat completions in chunks.
    ChatCompletionStreamResponseChoice:
      required:
        - index
        - delta
      type: object
      properties:
        index:
          type: integer
          description: The index of the choice in the array of choices.
        delta:
          $ref: '#/components/schemas/ChatCompletionStreamResponseDelta'
      description: A single chat completion chunk choice in a streaming response.
    ChatCompletionStreamResponseDelta:
      type: object
      properties:
        role:
          type: string
          description: 'The role of the author of this message, typically ''assistant'' for responses.'
      description: A partial message update to be merged with previous chunks in a streaming response.
  parameters:
    RequestTimeout:
      name: Request-Timeout
      in: header
      description: The API will make a best effort to complete the request in the specified seconds or time out.
      schema:
        minimum: 1
        type: integer
    RequestTimeoutMillis:
      name: Request-Timeout-Millis
      in: header
      description: The API will make a best effort to complete the request in the specified milliseconds or time out.
      schema:
        minimum: 1
        type: integer
  securitySchemes:
    OAuth2:
      type: oauth2
      description: OAuth2 access to Vectara
      flows:
        clientCredentials:
          tokenUrl: https://auth.vectara.io/oauth2/token
          scopes: { }
    ApiKeyAuth:
      type: apiKey
      name: x-api-key
      in: header
security:
  - ApiKeyAuth: [ ]
  - OAuth2: [ ]
tags:
  - name: Authentication
    description: Authenticate with the API using OAuth 2.0 or API keys
  - name: Queries
    description: Perform search and Retrieval Augmented Generation (RAG) operations on one or more corpora
  - name: Upload
    description: 'Upload files to a corpus for automatic parsing, text extraction, chunking, and indexing'
  - name: Index
    description: Index and manage both core and structured documents to enable efficient search and retrieval
  - name: Corpora
    description: 'Create, manage, and update corpora and their associated settings'
  - name: Documents
    description: Retrieve and manage documents stored in a corpus for administrative tasks
  - name: Chats
    description: 'Create, manage, and interact with chat sessions for conversational AI'
  - name: Generation Presets
    description: Manage generation presets for controlling the behavior of generative AI responses
  - name: Query History
    description: Retrieve and manage the history of previous queries for analytics and auditing
  - name: API Keys
    description: 'Create, manage, and revoke API keys for secure access to the platform'
  - name: Application Clients
    description: Configure and manage application clients for OAuth authentication
  - name: Large Language Models
    description: 'List LLMs for text summarization, chat, and other generation tasks'
  - name: Encoders
    description: List available encoders (such as Boomerang) that turn text into vectors
  - name: Rerankers
    description: List rerankers for reranking search results
  - name: Jobs
    description: Monitor background jobs such as rebuilding indexes or updating corpus settings
  - name: Users
    description: 'Create, manage, and authenticate users within the platform for user administration'
  - name: Table Extractors
    description: List available extractors for tabular data from documents
  - name: Hallucination Correctors
    description: 'API for managing hallucination correction, including listing available models and correcting hallucinated content in generated text'
  - name: LLM Chat Completions
    description: Create model responses for chat conversations using OpenAI-compatible endpoints
  - name: Factual Consistency Evaluation
    description: Evaluate text quality metrics like factual consistency and hallucination detection